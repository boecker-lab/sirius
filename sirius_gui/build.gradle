apply plugin: 'java-library'

mainClassName = "de.unijena.bioinf.ms.frontend.SiriusGUIApplication"

dependencies {
//project
    api project(':sirius_cli')

//internal
    api "de.unijena.bioinf:jjobs-swing:$jjobs_version"
    // will be ported to sirius_cli later
    api "de.unijena.bioinf.ms:combinatorial_fragmenter:$siriusVersion"
//external
    api "net.sf.opencsv:opencsv:2.3"
    api "org.swinglabs.swingx:swingx-all:1.6.5-1"

    //cdk
    for (module in ["render", "renderextra", "renderawt", "data", "core", "interfaces", "inchi", "smiles", "io", "ioformats", "sdg", "smarts", "legacy", "fingerprint", "silent", "depict"])
        api "org.openscience.cdk:cdk-$module:$cdk_version"

    api 'com.glazedlists:glazedlists:1.11.0'

    api 'org.apache.xmlgraphics:batik-rasterizer:1.16'
    api 'org.apache.xmlgraphics:fop:2.7'

    api 'com.formdev:flatlaf:3.1'

    if (excludeJFX)
        for (m in javaFX_modules) //define jfx as compile only, so that we can decide during build to either package for one or all platforms.
            compileOnly "org.openjfx:$m:$targetCompatibility.+:${siriusTargetPlatform.jfxClassifier().get()}"
    else
        for (m in javaFX_modules) //define jfx as compile only, so that we can decide during build to either package for one or all platforms.
           implementation "org.openjfx:$m:$targetCompatibility.+:${siriusTargetPlatform.jfxClassifier().get()}"
}

artifactory {
    contextUrl = 'https://bio.informatik.uni-jena.de/repository/'
    publish {
        repository {
            if (version.toString().endsWith('-SNAPSHOT'))
                repoKey = 'libs-snapshot-local'
            else
                repoKey = 'libs-release-local'

            username = project.findProperty('de.unijena.bioinf.build.artifactory.username')
            password = project.findProperty('de.unijena.bioinf.build.artifactory.password')
        }
        defaults {
            publications('mavenJava')
        }
    }
}