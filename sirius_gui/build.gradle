import com.github.jk1.license.filter.LicenseBundleNormalizer

plugins {
    id "com.github.kkdad.dependency-license-report" version "1.14.2"
}
apply plugin: 'java-library'
licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
//    outputDir = "$projectDir/build/licenses"

    // Select projects to examine for dependencies.
    // Defaults to current project and all its subprojects
//    projects = [project] + project.subprojects

    // Adjust the configurations to fetch dependencies, e.g. for Android projects. Default is 'runtimeClasspath'
    configurations = ['compile']
    // Use 'ALL' to dynamically resolve all configurations:
    // configurations = ALL

    // List the groups ids to exclude from dependency report. Supports regular expressions.
    // For finer granularity, see: excludes.
    excludeGroups = ['cplex', 'gurobi', 'de.unijena.bioinf', 'de.unijena.bioinf.utils']

    // List the ids (in module:name format) to exclude from dependency report. Supports regular expressions.
    // By default excludes is empty.
//    excludes = ['moduleGroup:moduleName']

    // Don't include artifacts of project's own group into the report
    excludeOwnGroup = true

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
//    renderers = [new XmlReportRenderer('third-party-libs.xml', 'Back-End Libraries')]
//    renderers = [new InventoryHtmlReportRenderer()]

    // Set importers to import any external dependency information, i.e. from npm.
    // Custom importer should implement DependencyDataImporter interface.
//    importers = [new XmlReportImporter('Frontend dependencies', file(frontend_libs.xml))]

    // This is for the allowed-licenses-file in checkLicense Task
    // Accepts File, URL or String path to local or remote file
//    allowedLicensesFile = new File("$projectDir/config/allowed-licenses.json")
    filters = [new LicenseBundleNormalizer(bundlePath: "$rootDir/licence-groups.json")]
}

ext['jna.version'] = '5.4.0'

dependencies {
//project
    api project(':sirius_cli')
//    implementation "de.unijena.bioinf.ms:ft_glpk:$siriusVersion"
//    implementation "org.slf4j:slf4j-jdk14:$slf4j_version"

//internal
    api "de.unijena.bioinf:jjobs-swing:$jjobs_version"
    // will be ported to sirius_cli later
    api "de.unijena.bioinf.ms:combinatorial_fragmenter:$siriusVersion"
//external
    api "net.sf.opencsv:opencsv:2.3"
    api "org.swinglabs.swingx:swingx-all:1.6.5-1"
    api "org.openscience.cdk:cdk-render:$cdk_version"
    api "org.openscience.cdk:cdk-renderextra:$cdk_version"
    api "org.openscience.cdk:cdk-renderawt:$cdk_version"
    api "org.openscience.cdk:cdk-data:$cdk_version"
    api "org.openscience.cdk:cdk-core:$cdk_version"
    api "org.openscience.cdk:cdk-interfaces:$cdk_version"
    api "org.openscience.cdk:cdk-inchi:$cdk_version"
    api "org.openscience.cdk:cdk-smiles:$cdk_version"
    api "org.openscience.cdk:cdk-io:$cdk_version"
    api "org.openscience.cdk:cdk-ioformats:$cdk_version"
    api "org.openscience.cdk:cdk-sdg:$cdk_version"
    api "org.openscience.cdk:cdk-smarts:$cdk_version"
    api "org.openscience.cdk:cdk-legacy:$cdk_version"

    api 'com.glazedlists:glazedlists:1.11.0'

//    api 'com.kitfox.svg:svg-salamander:1.0'
    api 'org.apache.xmlgraphics:batik-rasterizer:1.14'
    api 'org.apache.xmlgraphics:fop:2.7'

}

//this includes compileOnly dependencies like the ILP solver jars to the idea provided scope.
/*idea {
    module {
        scopes.RUNTIME.plus += [configurations.compileOnly]
    }
}*/

artifactory {
    contextUrl = 'https://bio.informatik.uni-jena.de/repository/'
    publish {
        repository {
            if (version.toString().endsWith('-SNAPSHOT'))
                repoKey = 'libs-snapshot-local'
            else
                repoKey = 'libs-release-local'

            username = project.findProperty('de.unijena.bioinf.build.artifactory.username')
            password = project.findProperty('de.unijena.bioinf.build.artifactory.password')
        }
        defaults {
            publications('mavenJava')
        }
    }
}