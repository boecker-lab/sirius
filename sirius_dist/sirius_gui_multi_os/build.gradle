import edu.sc.seis.launch4j.tasks.Launch4jLibraryTask

import java.util.stream.Collectors

apply plugin: "application"

ext {
    libDir = findProperty("sirius.build.location.lib")
    includeWinStarter = !findProperty("build.sirius.starter.remove.win")
    includeIxStarter = !findProperty("build.sirius.starter.remove.ix")
    excludeNativeWin = findProperty("build.sirius.native.remove.win")
    excludeNativeLinux = findProperty("build.sirius.native.remove.linux")
    excludeNativeMac = findProperty("build.sirius.native.remove.mac")
}

dependencies {
    implementation project(':sirius_gui')
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: "$slf4j_version"
}
mainClassName = "de.unijena.bioinf.ms.frontend.SiriusGUIApplication"

application {
    mainClass = project.mainClassName
    applicationDefaultJvmArgs = ['-Xms1G',
                                 '-XX:MaxRAMPercentage=85',
                                 '-XX:+UseG1GC',
                                 '-XX:+UseStringDeduplication',
                                 '-XX:+ExitOnOutOfMemoryError']
    executableDir = 'bin'
    application.applicationName = 'sirius'
}


launch4j {
    mainClassName = project.mainClassName
    jar = getLibraryDir() + "\\" + getRootProject().getChildProjects().get('sirius_gui').tasks.getByName('jar').outputs.files.singleFile.getName()
    jvmOptions = application.applicationDefaultJvmArgs
    dontWrapJar = true
    bundledJrePath = null
    bundledJre64Bit = false
    classpath = [(libDir == null ? "lib" : libDir) + "\\*",
                 "%GUROBI_HOME%\\lib\\gurobi.jar",
                 "%CPLEX_HOME%\\lib\\cplex.jar"
    ]
    libraryDir = libDir == null ? "lib" : libDir
    jdkPreference = "preferJdk"
    jreMinVersion = "13"
}

//additional GUI win launcher
task createGuiExe(type: Launch4jLibraryTask) {
    outfile = 'sirius-gui.exe'
    fileDescription = 'SIRIUS graphical user interface'
    headerType = "gui"
    cmdLine = "gui"
}


startScripts {
    applicationName = "sirius"
    defaultJvmOpts = application.applicationDefaultJvmArgs

    doLast {
        // writer sh script
        if (includeIxStarter) {
            def templateBinding = [
                    toolName : "SIRIUS",
                    mainClass: mainClassName
            ]
            def sf = file("${rootDir}/scripts/sirius.sh.templ")
            templateBinding.shell = "sh"
            templateBinding.classPath = "\\\"\$JAR_HOME/*\\\":\\\"\$GUROBI_HOME/lib/gurobi.jar\\\":\\\"\$CPLEX_HOME/lib/cplex.jar\\\""
            templateBinding.javaLibPath = ""
            templateBinding.gurobiHome = "/lib"
            templateBinding.cplexHome = "/bin/x86-64_linux"
            templateBinding.jvmOpts = "${application.applicationDefaultJvmArgs.stream().collect(Collectors.joining(' '))}"
            templateBinding.javaCommand = "\$APP_HOME/lib/runtime/bin/java"
            templateBinding.jarHome = libDir == null ? "\$APP_HOME/lib" : libDir

            String script = sf.text
            templateBinding.forEach({ k, v -> script = script.replace("#$k#", v) })
            unixScript.withWriter { it.write(script) }
            unixScript.setExecutable(true, false)
            unixScript.renameTo(unixScript.path + '.sh')
        } else{
            delete(unixScript)
        }

        if (includeWinStarter) {
//reset binding and create windows bat
            def templateBinding = [
                    toolName : "SIRIUS",
                    mainClass: mainClassName
            ]
            // write bat
            def sf = file("${rootDir}/scripts/sirius.bat.templ")
            templateBinding.classPath = "%JAR_HOME%\\*"
            templateBinding.jvmOpts = "${application.applicationDefaultJvmArgs.stream().map({ s -> '"' + s + '"' }).collect(Collectors.joining(" "))}"
            templateBinding.jarHome = libDir == null ? "\$APP_HOME/lib" : libDir
            templateBinding.gurobiJar = "%GUROBI_HOME%\\lib\\gurobi.jar"
            templateBinding.cplexJar = "%CPLEX_HOME%\\lib\\cplex.jar"

            String script = sf.text
            templateBinding.forEach({ k, v -> script = script.replace("#$k#", v) })
            windowsScript.withWriter { it.write(script) }
            windowsScript.setExecutable(true, false)
        } else{
            delete(windowsScript)
        }
    }
}

distributions {
    main {
        contents {
            exclude 'gurobi-jar-*.jar'
            exclude 'cplex-*.jar'
            if (excludeNativeWin)
                exclude 'cbc-java-win-*.jar'
            if (excludeNativeLinux)
                exclude 'cbc-java-linux-*.jar'
            if (excludeNativeMac)
                exclude 'cbc-java-mac-*.jar'

            into('bin') {
                if (includeWinStarter) {
                    from("${buildDir}/launch4j") {
                        include("*.exe")
                    }
                }
                if (includeIxStarter) {
                    from("${rootDir}/scripts") {
                        include 'sirius-gui.sh'
                    }
                }

            }

            from("${rootDir}") {
                include('COPYING.txt')
                include('LICENSE.txt')
            }
        }
    }
}
distZip.dependsOn('launch4j')
distZip.dependsOn('createGuiExe')
distTar.dependsOn('launch4j')
distTar.dependsOn('createGuiExe')
installDist.dependsOn('launch4j')
installDist.dependsOn('createGuiExe')
distribution.dependsOn 'distZip'
//distribution.dependsOn 'distTar'
distribution.dependsOn 'createChecksums'