buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.6.8")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

ext['jna.version'] = '5.4.0'


dependencies {
    compile project(':sirius_rest_service')
}

configurations.all {
    //replaced by log4j-over-slf4j
    it.exclude group: "log4j", module: "log4j"
    //replaced by jcl-over-slf4j
    it.exclude group: "commons-logging", module: "commons-logging"
}
//mainClassName = 'org.springframework.boot.loader.PropertiesLauncher'
mainClassName = 'org.springframework.boot.loader.JarLauncher'


/*################### Jar build Stuff ################### */

launch4j{
    mainClassName = project.mainClassName
    jar = getLibraryDir() + "\\" + getRootProject().getChildProjects().get('sirius_rest_service').tasks.getByName('bootJar').outputs.files.singleFile.getName()
}

distImage {
    dependsOn getParent().tasks.getByName('extractRuntimeImageHeadless')
    dependsOn  getRootProject().getChildProjects().get('sirius_rest_service').tasks.getByName('bootJar')

    inputDir = getRootProject().getChildProjects().get('sirius_rest_service').tasks.getByName('bootJar').outputs.files.singleFile.toPath().getParent().toFile()
    runtimeImageDirectory = getParent().tasks.getByName('extractRuntimeImageHeadless').outputs.files.singleFile
    imageName = 'sirius-rest'
    mainClass = mainClassName
    mainJarName = getRootProject().getChildProjects().get('sirius_rest_service').tasks.getByName('bootJar').outputs.files.singleFile.getName()
    winConsole = true
    macPackageName = 'SIRIUS-headless-rest'
}
distImage.dependsOn getRootProject().getChildProjects().get('sirius_rest_service').tasks.getByName('bootJar')
distribution.dependsOn 'distImageZip'
//distribution.dependsOn 'distInstaller'
distribution.dependsOn 'createChecksums'

publishing {
    publications {
        siriusMS(org.gradle.api.publish.maven.MavenPublication) {
            artifactId = "$name"
            groupId = "$group"
            artifact source: "${distImage.getImageDir().absolutePath}.zip", classifier: "$osName-headless-rest", extension: 'zip'
//            if (!OS.isLinux())
//                artifact source: "${OS.isMacOsX() ? distImage.getImageDir().absolutePath.replace('.app', installerAppendix) : distImage.getImageDir().absolutePath + installerAppendix}", classifier: "$osName-headless", extension: installerNameType
        }
        sirius(org.gradle.api.publish.maven.MavenPublication) {
            artifactId = "$name"
            groupId = "$group"
            artifact source: "${distImage.getImageDir().absolutePath}.zip", classifier: "$osName-headless-rest", extension: 'zip'
            artifact source: "${distImage.getImageDir().absolutePath}.zip.sha256", classifier: "$osName-headless-rest", extension: 'zip.sha256'
            /*if (!OS.isLinux()) {
                artifact source: "${OS.isMacOsX() ? distImage.getImageDir().absolutePath.replace('.app', installerAppendix) : distImage.getImageDir().absolutePath + installerAppendix}", classifier: "$osName-headless", extension: installerNameType
                artifact source: "${OS.isMacOsX() ? distImage.getImageDir().absolutePath.replace('.app', installerAppendix) : distImage.getImageDir().absolutePath + installerAppendix}.sha256", classifier: "$osName-headless", extension: "${installerNameType}.sha256"
            }*/
        }
    }
}
publishSiriusPublicationToMavenLocal.dependsOn 'distribution'
publishSiriusMSPublicationToMavenLocal.dependsOn 'distribution'
