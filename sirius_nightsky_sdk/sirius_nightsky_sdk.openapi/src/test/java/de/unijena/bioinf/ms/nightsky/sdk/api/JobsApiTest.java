/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.api;

import de.unijena.bioinf.ms.nightsky.sdk.client.ApiException;
import de.unijena.bioinf.ms.nightsky.sdk.model.ImportLocalFilesSubmission;
import de.unijena.bioinf.ms.nightsky.sdk.model.ImportStringSubmission;
import de.unijena.bioinf.ms.nightsky.sdk.model.Job;
import de.unijena.bioinf.ms.nightsky.sdk.model.JobOptField;
import de.unijena.bioinf.ms.nightsky.sdk.model.JobSubmission;
import de.unijena.bioinf.ms.nightsky.sdk.model.PageJob;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for JobsApi
 */
@Ignore
public class JobsApiTest {

    private final JobsApi api = new JobsApi();

    
    /**
     * Delete job.
     *
     * Delete job. Specify how to behave for running jobs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        Boolean cancelIfRunning = null;
        Boolean awaitDeletion = null;
        
        api.deleteJob(projectId, jobId, cancelIfRunning, awaitDeletion);
        
        // TODO: test validations
    }
    
    /**
     * Delete job configuration with given name.
     *
     * Delete job configuration with given name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobConfigTest() throws ApiException {
        String name = null;
        
        api.deleteJobConfig(name);
        
        // TODO: test validations
    }
    
    /**
     * Request default job configuration
     *
     * Request default job configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefaultJobConfigTest() throws ApiException {
        Boolean includeConfigMap = null;
        JobSubmission response = 
        api.getDefaultJobConfig(includeConfigMap);
        
        // TODO: test validations
    }
    
    /**
     * Get job information and its current state and progress (if available).
     *
     * Get job information and its current state and progress (if available).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String projectId = null;
        String jobId = null;
        List<JobOptField> optFields = null;
        Job response = 
        api.getJob(projectId, jobId, optFields);
        
        // TODO: test validations
    }
    
    /**
     * Request job configuration with given name.
     *
     * Request job configuration with given name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobConfigTest() throws ApiException {
        String name = null;
        Boolean includeConfigMap = null;
        JobSubmission response = 
        api.getJobConfig(name, includeConfigMap);
        
        // TODO: test validations
    }
    
    /**
     * Request all available job configurations
     *
     * Request all available job configurations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobConfigsTest() throws ApiException {
        Boolean includeConfigMap = null;
        List<JobSubmission> response = 
        api.getJobConfigs(includeConfigMap);
        
        // TODO: test validations
    }
    
    /**
     * Get job information and its current state and progress (if available).
     *
     * Get job information and its current state and progress (if available).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        String projectId = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        List<JobOptField> optFields = null;
        PageJob response = 
        api.getJobs(projectId, page, size, sort, optFields);
        
        // TODO: test validations
    }
    
    /**
     * Add new job configuration with given name.
     *
     * Add new job configuration with given name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postJobConfigTest() throws ApiException {
        String name = null;
        JobSubmission jobSubmission = null;
        Boolean overrideExisting = null;
        String response = 
        api.postJobConfig(name, jobSubmission, overrideExisting);
        
        // TODO: test validations
    }
    
    /**
     * Import ms/ms data in given format from local filesystem into the specified project
     *
     * Import ms/ms data in given format from local filesystem into the specified project.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startImportFromPathJobTest() throws ApiException {
        String projectId = null;
        ImportLocalFilesSubmission importLocalFilesSubmission = null;
        List<JobOptField> optFields = null;
        Job response = 
        api.startImportFromPathJob(projectId, importLocalFilesSubmission, optFields);
        
        // TODO: test validations
    }
    
    /**
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     *
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startImportFromStringJobTest() throws ApiException {
        String projectId = null;
        ImportStringSubmission importStringSubmission = null;
        List<JobOptField> optFields = null;
        Job response = 
        api.startImportFromStringJob(projectId, importStringSubmission, optFields);
        
        // TODO: test validations
    }
    
    /**
     * Start computation for given compounds and with given parameters.
     *
     * Start computation for given compounds and with given parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startJobTest() throws ApiException {
        String projectId = null;
        JobSubmission jobSubmission = null;
        List<JobOptField> optFields = null;
        Job response = 
        api.startJob(projectId, jobSubmission, optFields);
        
        // TODO: test validations
    }
    
    /**
     * Start computation for given compounds and with parameters from a stored job-config.
     *
     * Start computation for given compounds and with parameters from a stored job-config.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startJobFromConfigTest() throws ApiException {
        String projectId = null;
        String jobConfigName = null;
        List<String> requestBody = null;
        Boolean recompute = null;
        List<JobOptField> optFields = null;
        Job response = 
        api.startJobFromConfig(projectId, jobConfigName, requestBody, recompute, optFields);
        
        // TODO: test validations
    }
    
}
