/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.unijena.bioinf.ms.nightsky.sdk.model.BinaryFingerprint;
import de.unijena.bioinf.ms.nightsky.sdk.model.DBLink;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * 
 */
@JsonPropertyOrder({
  StructureCandidateScored.JSON_PROPERTY_INCHI_KEY,
  StructureCandidateScored.JSON_PROPERTY_SMILES,
  StructureCandidateScored.JSON_PROPERTY_STRUCTURE_NAME,
  StructureCandidateScored.JSON_PROPERTY_XLOG_P,
  StructureCandidateScored.JSON_PROPERTY_DB_LINKS,
  StructureCandidateScored.JSON_PROPERTY_REF_SPECTRA_LINKS,
  StructureCandidateScored.JSON_PROPERTY_CSI_SCORE,
  StructureCandidateScored.JSON_PROPERTY_TANIMOTO_SIMILARITY,
  StructureCandidateScored.JSON_PROPERTY_CONFIDENCE_EXACT_MATCH,
  StructureCandidateScored.JSON_PROPERTY_CONFIDENCE_APPROX_MATCH,
  StructureCandidateScored.JSON_PROPERTY_FINGERPRINT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StructureCandidateScored {
  public static final String JSON_PROPERTY_INCHI_KEY = "inchiKey";
  private String inchiKey;

  public static final String JSON_PROPERTY_SMILES = "smiles";
  private String smiles;

  public static final String JSON_PROPERTY_STRUCTURE_NAME = "structureName";
  private String structureName;

  public static final String JSON_PROPERTY_XLOG_P = "xlogP";
  private Double xlogP;

  public static final String JSON_PROPERTY_DB_LINKS = "dbLinks";
  private List<DBLink> dbLinks;

  public static final String JSON_PROPERTY_REF_SPECTRA_LINKS = "refSpectraLinks";
  private List<DBLink> refSpectraLinks;

  public static final String JSON_PROPERTY_CSI_SCORE = "csiScore";
  private Double csiScore;

  public static final String JSON_PROPERTY_TANIMOTO_SIMILARITY = "tanimotoSimilarity";
  private Double tanimotoSimilarity;

  public static final String JSON_PROPERTY_CONFIDENCE_EXACT_MATCH = "confidenceExactMatch";
  private Double confidenceExactMatch;

  public static final String JSON_PROPERTY_CONFIDENCE_APPROX_MATCH = "confidenceApproxMatch";
  private Double confidenceApproxMatch;

  public static final String JSON_PROPERTY_FINGERPRINT = "fingerprint";
  private BinaryFingerprint fingerprint;

  public StructureCandidateScored() { 
  }

  public StructureCandidateScored inchiKey(String inchiKey) {
    this.inchiKey = inchiKey;
    return this;
  }

   /**
   * Get inchiKey
   * @return inchiKey
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCHI_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInchiKey() {
    return inchiKey;
  }


  @JsonProperty(JSON_PROPERTY_INCHI_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInchiKey(String inchiKey) {
    this.inchiKey = inchiKey;
  }


  public StructureCandidateScored smiles(String smiles) {
    this.smiles = smiles;
    return this;
  }

   /**
   * Get smiles
   * @return smiles
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SMILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSmiles() {
    return smiles;
  }


  @JsonProperty(JSON_PROPERTY_SMILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmiles(String smiles) {
    this.smiles = smiles;
  }


  public StructureCandidateScored structureName(String structureName) {
    this.structureName = structureName;
    return this;
  }

   /**
   * Get structureName
   * @return structureName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STRUCTURE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStructureName() {
    return structureName;
  }


  @JsonProperty(JSON_PROPERTY_STRUCTURE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStructureName(String structureName) {
    this.structureName = structureName;
  }


  public StructureCandidateScored xlogP(Double xlogP) {
    this.xlogP = xlogP;
    return this;
  }

   /**
   * Get xlogP
   * @return xlogP
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_XLOG_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getXlogP() {
    return xlogP;
  }


  @JsonProperty(JSON_PROPERTY_XLOG_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setXlogP(Double xlogP) {
    this.xlogP = xlogP;
  }


  public StructureCandidateScored dbLinks(List<DBLink> dbLinks) {
    this.dbLinks = dbLinks;
    return this;
  }

  public StructureCandidateScored addDbLinksItem(DBLink dbLinksItem) {
    if (this.dbLinks == null) {
      this.dbLinks = new ArrayList<>();
    }
    this.dbLinks.add(dbLinksItem);
    return this;
  }

   /**
   * List of structure database links belonging to this structure candidate  OPTIONAL: needs to be added by parameter
   * @return dbLinks
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DB_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DBLink> getDbLinks() {
    return dbLinks;
  }


  @JsonProperty(JSON_PROPERTY_DB_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDbLinks(List<DBLink> dbLinks) {
    this.dbLinks = dbLinks;
  }


  public StructureCandidateScored refSpectraLinks(List<DBLink> refSpectraLinks) {
    this.refSpectraLinks = refSpectraLinks;
    return this;
  }

  public StructureCandidateScored addRefSpectraLinksItem(DBLink refSpectraLinksItem) {
    if (this.refSpectraLinks == null) {
      this.refSpectraLinks = new ArrayList<>();
    }
    this.refSpectraLinks.add(refSpectraLinksItem);
    return this;
  }

   /**
   * List of spectral library links belonging to this structure candidate  OPTIONAL: needs to be added by parameter
   * @return refSpectraLinks
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REF_SPECTRA_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DBLink> getRefSpectraLinks() {
    return refSpectraLinks;
  }


  @JsonProperty(JSON_PROPERTY_REF_SPECTRA_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRefSpectraLinks(List<DBLink> refSpectraLinks) {
    this.refSpectraLinks = refSpectraLinks;
  }


  public StructureCandidateScored csiScore(Double csiScore) {
    this.csiScore = csiScore;
    return this;
  }

   /**
   * Get csiScore
   * @return csiScore
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CSI_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getCsiScore() {
    return csiScore;
  }


  @JsonProperty(JSON_PROPERTY_CSI_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCsiScore(Double csiScore) {
    this.csiScore = csiScore;
  }


  public StructureCandidateScored tanimotoSimilarity(Double tanimotoSimilarity) {
    this.tanimotoSimilarity = tanimotoSimilarity;
    return this;
  }

   /**
   * Get tanimotoSimilarity
   * @return tanimotoSimilarity
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TANIMOTO_SIMILARITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getTanimotoSimilarity() {
    return tanimotoSimilarity;
  }


  @JsonProperty(JSON_PROPERTY_TANIMOTO_SIMILARITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTanimotoSimilarity(Double tanimotoSimilarity) {
    this.tanimotoSimilarity = tanimotoSimilarity;
  }


  public StructureCandidateScored confidenceExactMatch(Double confidenceExactMatch) {
    this.confidenceExactMatch = confidenceExactMatch;
    return this;
  }

   /**
   * Get confidenceExactMatch
   * @return confidenceExactMatch
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONFIDENCE_EXACT_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getConfidenceExactMatch() {
    return confidenceExactMatch;
  }


  @JsonProperty(JSON_PROPERTY_CONFIDENCE_EXACT_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfidenceExactMatch(Double confidenceExactMatch) {
    this.confidenceExactMatch = confidenceExactMatch;
  }


  public StructureCandidateScored confidenceApproxMatch(Double confidenceApproxMatch) {
    this.confidenceApproxMatch = confidenceApproxMatch;
    return this;
  }

   /**
   * Get confidenceApproxMatch
   * @return confidenceApproxMatch
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONFIDENCE_APPROX_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getConfidenceApproxMatch() {
    return confidenceApproxMatch;
  }


  @JsonProperty(JSON_PROPERTY_CONFIDENCE_APPROX_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfidenceApproxMatch(Double confidenceApproxMatch) {
    this.confidenceApproxMatch = confidenceApproxMatch;
  }


  public StructureCandidateScored fingerprint(BinaryFingerprint fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

   /**
   * Get fingerprint
   * @return fingerprint
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINGERPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BinaryFingerprint getFingerprint() {
    return fingerprint;
  }


  @JsonProperty(JSON_PROPERTY_FINGERPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFingerprint(BinaryFingerprint fingerprint) {
    this.fingerprint = fingerprint;
  }


  /**
   * Return true if this StructureCandidateScored object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StructureCandidateScored structureCandidateScored = (StructureCandidateScored) o;
    return Objects.equals(this.inchiKey, structureCandidateScored.inchiKey) &&
        Objects.equals(this.smiles, structureCandidateScored.smiles) &&
        Objects.equals(this.structureName, structureCandidateScored.structureName) &&
        Objects.equals(this.xlogP, structureCandidateScored.xlogP) &&
        Objects.equals(this.dbLinks, structureCandidateScored.dbLinks) &&
        Objects.equals(this.refSpectraLinks, structureCandidateScored.refSpectraLinks) &&
        Objects.equals(this.csiScore, structureCandidateScored.csiScore) &&
        Objects.equals(this.tanimotoSimilarity, structureCandidateScored.tanimotoSimilarity) &&
        Objects.equals(this.confidenceExactMatch, structureCandidateScored.confidenceExactMatch) &&
        Objects.equals(this.confidenceApproxMatch, structureCandidateScored.confidenceApproxMatch) &&
        Objects.equals(this.fingerprint, structureCandidateScored.fingerprint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inchiKey, smiles, structureName, xlogP, dbLinks, refSpectraLinks, csiScore, tanimotoSimilarity, confidenceExactMatch, confidenceApproxMatch, fingerprint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StructureCandidateScored {\n");
    sb.append("    inchiKey: ").append(toIndentedString(inchiKey)).append("\n");
    sb.append("    smiles: ").append(toIndentedString(smiles)).append("\n");
    sb.append("    structureName: ").append(toIndentedString(structureName)).append("\n");
    sb.append("    xlogP: ").append(toIndentedString(xlogP)).append("\n");
    sb.append("    dbLinks: ").append(toIndentedString(dbLinks)).append("\n");
    sb.append("    refSpectraLinks: ").append(toIndentedString(refSpectraLinks)).append("\n");
    sb.append("    csiScore: ").append(toIndentedString(csiScore)).append("\n");
    sb.append("    tanimotoSimilarity: ").append(toIndentedString(tanimotoSimilarity)).append("\n");
    sb.append("    confidenceExactMatch: ").append(toIndentedString(confidenceExactMatch)).append("\n");
    sb.append("    confidenceApproxMatch: ").append(toIndentedString(confidenceApproxMatch)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `inchiKey` to the URL query string
    if (getInchiKey() != null) {
      joiner.add(String.format("%sinchiKey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInchiKey()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `smiles` to the URL query string
    if (getSmiles() != null) {
      joiner.add(String.format("%ssmiles%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSmiles()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `structureName` to the URL query string
    if (getStructureName() != null) {
      joiner.add(String.format("%sstructureName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStructureName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `xlogP` to the URL query string
    if (getXlogP() != null) {
      joiner.add(String.format("%sxlogP%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getXlogP()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dbLinks` to the URL query string
    if (getDbLinks() != null) {
      for (int i = 0; i < getDbLinks().size(); i++) {
        if (getDbLinks().get(i) != null) {
          joiner.add(getDbLinks().get(i).toUrlQueryString(String.format("%sdbLinks%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `refSpectraLinks` to the URL query string
    if (getRefSpectraLinks() != null) {
      for (int i = 0; i < getRefSpectraLinks().size(); i++) {
        if (getRefSpectraLinks().get(i) != null) {
          joiner.add(getRefSpectraLinks().get(i).toUrlQueryString(String.format("%srefSpectraLinks%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `csiScore` to the URL query string
    if (getCsiScore() != null) {
      joiner.add(String.format("%scsiScore%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCsiScore()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tanimotoSimilarity` to the URL query string
    if (getTanimotoSimilarity() != null) {
      joiner.add(String.format("%stanimotoSimilarity%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTanimotoSimilarity()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `confidenceExactMatch` to the URL query string
    if (getConfidenceExactMatch() != null) {
      joiner.add(String.format("%sconfidenceExactMatch%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConfidenceExactMatch()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `confidenceApproxMatch` to the URL query string
    if (getConfidenceApproxMatch() != null) {
      joiner.add(String.format("%sconfidenceApproxMatch%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConfidenceApproxMatch()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fingerprint` to the URL query string
    if (getFingerprint() != null) {
      joiner.add(getFingerprint().toUrlQueryString(prefix + "fingerprint" + suffix));
    }

    return joiner.toString();
  }
}

