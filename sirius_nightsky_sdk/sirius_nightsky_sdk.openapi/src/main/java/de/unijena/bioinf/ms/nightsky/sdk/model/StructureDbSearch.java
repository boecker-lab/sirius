/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * User/developer friendly parameter subset for the CSI:FingerID structure db search tool.
 */
@JsonPropertyOrder({
  StructureDbSearch.JSON_PROPERTY_ENABLED,
  StructureDbSearch.JSON_PROPERTY_STRUCTURE_SEARCH_D_BS,
  StructureDbSearch.JSON_PROPERTY_TAG_LIPIDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StructureDbSearch {
  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  /**
   * Gets or Sets structureSearchDBs
   */
  public enum StructureSearchDBsEnum {
    ALL("ALL"),
    
    ALL_BUT_INSILICO("ALL_BUT_INSILICO"),
    
    BIO("BIO"),
    
    PUBCHEM("PUBCHEM"),
    
    MESH("MESH"),
    
    HMDB("HMDB"),
    
    KNAPSACK("KNAPSACK"),
    
    CHEBI("CHEBI"),
    
    PUBMED("PUBMED"),
    
    KEGG("KEGG"),
    
    HSDB("HSDB"),
    
    MACONDA("MACONDA"),
    
    METACYC("METACYC"),
    
    GNPS("GNPS"),
    
    ZINCBIO("ZINCBIO"),
    
    TRAIN("TRAIN"),
    
    YMDB("YMDB"),
    
    PLANTCYC("PLANTCYC"),
    
    NORMAN("NORMAN"),
    
    SUPERNATURAL("SUPERNATURAL"),
    
    COCONUT("COCONUT"),
    
    BLOODEXPOSOME("BloodExposome"),
    
    TEROMOL("TeroMol"),
    
    PUBCHEMANNOTATIONBIO("PUBCHEMANNOTATIONBIO"),
    
    PUBCHEMANNOTATIONDRUG("PUBCHEMANNOTATIONDRUG"),
    
    PUBCHEMANNOTATIONSAFETYANDTOXIC("PUBCHEMANNOTATIONSAFETYANDTOXIC"),
    
    PUBCHEMANNOTATIONFOOD("PUBCHEMANNOTATIONFOOD"),
    
    LOTUS("LOTUS"),
    
    FOODB("FooDB"),
    
    MIMEDB("MiMeDB"),
    
    LIPIDMAPS("LIPIDMAPS"),
    
    LIPID("LIPID"),
    
    KEGGMINE("KEGGMINE"),
    
    ECOCYCMINE("ECOCYCMINE"),
    
    YMDBMINE("YMDBMINE"),
    
    MASSBANK("MASSBANK"),
    
    DSSTOX("DSSTox");

    private String value;

    StructureSearchDBsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StructureSearchDBsEnum fromValue(String value) {
      for (StructureSearchDBsEnum b : StructureSearchDBsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STRUCTURE_SEARCH_D_BS = "structureSearchDBs";
  private List<StructureSearchDBsEnum> structureSearchDBs;

  public static final String JSON_PROPERTY_TAG_LIPIDS = "tagLipids";
  private Boolean tagLipids;

  public StructureDbSearch() {
  }

  public StructureDbSearch enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * tags whether the tool is enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean isEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public StructureDbSearch structureSearchDBs(List<StructureSearchDBsEnum> structureSearchDBs) {
    
    this.structureSearchDBs = structureSearchDBs;
    return this;
  }

  public StructureDbSearch addStructureSearchDBsItem(StructureSearchDBsEnum structureSearchDBsItem) {
    if (this.structureSearchDBs == null) {
      this.structureSearchDBs = new ArrayList<>();
    }
    this.structureSearchDBs.add(structureSearchDBsItem);
    return this;
  }

   /**
   * Structure databases to search in
   * @return structureSearchDBs
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STRUCTURE_SEARCH_D_BS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<StructureSearchDBsEnum> getStructureSearchDBs() {
    return structureSearchDBs;
  }


  @JsonProperty(JSON_PROPERTY_STRUCTURE_SEARCH_D_BS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStructureSearchDBs(List<StructureSearchDBsEnum> structureSearchDBs) {
    this.structureSearchDBs = structureSearchDBs;
  }


  public StructureDbSearch tagLipids(Boolean tagLipids) {
    
    this.tagLipids = tagLipids;
    return this;
  }

   /**
   * Candidates matching the lipid class estimated by El Gordo will be tagged.  The lipid class will only be available if El Gordo predicts that the MS/MS is a lipid spectrum.  If this parameter is set to &#39;false&#39; El Gordo will still be executed and e.g. improve the fragmentation  tree, but the matching structure candidates will not be tagged if they match lipid class.
   * @return tagLipids
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAG_LIPIDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean isTagLipids() {
    return tagLipids;
  }


  @JsonProperty(JSON_PROPERTY_TAG_LIPIDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTagLipids(Boolean tagLipids) {
    this.tagLipids = tagLipids;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StructureDbSearch structureDbSearch = (StructureDbSearch) o;
    return Objects.equals(this.enabled, structureDbSearch.enabled) &&
        Objects.equals(this.structureSearchDBs, structureDbSearch.structureSearchDBs) &&
        Objects.equals(this.tagLipids, structureDbSearch.tagLipids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, structureSearchDBs, tagLipids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StructureDbSearch {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    structureSearchDBs: ").append(toIndentedString(structureSearchDBs)).append("\n");
    sb.append("    tagLipids: ").append(toIndentedString(tagLipids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

