/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.unijena.bioinf.ms.nightsky.sdk.model.Canopus;
import de.unijena.bioinf.ms.nightsky.sdk.model.FingerprintPrediction;
import de.unijena.bioinf.ms.nightsky.sdk.model.Sirius;
import de.unijena.bioinf.ms.nightsky.sdk.model.StructureDbSearch;
import de.unijena.bioinf.ms.nightsky.sdk.model.Zodiac;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Object to submit a job to be executed by SIRIUS
 */
@JsonPropertyOrder({
  JobSubmission.JSON_PROPERTY_COMPOUND_IDS,
  JobSubmission.JSON_PROPERTY_ALIGNED_FEATURE_IDS,
  JobSubmission.JSON_PROPERTY_FALLBACK_ADDUCTS,
  JobSubmission.JSON_PROPERTY_ENFORCED_ADDUCTS,
  JobSubmission.JSON_PROPERTY_DETECTABLE_ADDUCTS,
  JobSubmission.JSON_PROPERTY_RECOMPUTE,
  JobSubmission.JSON_PROPERTY_FORMULA_ID_PARAMS,
  JobSubmission.JSON_PROPERTY_ZODIAC_PARAMS,
  JobSubmission.JSON_PROPERTY_FINGERPRINT_PREDICTION_PARAMS,
  JobSubmission.JSON_PROPERTY_STRUCTURE_DB_SEARCH_PARAMS,
  JobSubmission.JSON_PROPERTY_CANOPUS_PARAMS,
  JobSubmission.JSON_PROPERTY_CONFIG_MAP
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class JobSubmission {
  public static final String JSON_PROPERTY_COMPOUND_IDS = "compoundIds";
  private JsonNullable<List<String>> compoundIds = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_ALIGNED_FEATURE_IDS = "alignedFeatureIds";
  private JsonNullable<List<String>> alignedFeatureIds = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_FALLBACK_ADDUCTS = "fallbackAdducts";
  private List<String> fallbackAdducts;

  public static final String JSON_PROPERTY_ENFORCED_ADDUCTS = "enforcedAdducts";
  private List<String> enforcedAdducts;

  public static final String JSON_PROPERTY_DETECTABLE_ADDUCTS = "detectableAdducts";
  private List<String> detectableAdducts;

  public static final String JSON_PROPERTY_RECOMPUTE = "recompute";
  private Boolean recompute;

  public static final String JSON_PROPERTY_FORMULA_ID_PARAMS = "formulaIdParams";
  private Sirius formulaIdParams;

  public static final String JSON_PROPERTY_ZODIAC_PARAMS = "zodiacParams";
  private Zodiac zodiacParams;

  public static final String JSON_PROPERTY_FINGERPRINT_PREDICTION_PARAMS = "fingerprintPredictionParams";
  private FingerprintPrediction fingerprintPredictionParams;

  public static final String JSON_PROPERTY_STRUCTURE_DB_SEARCH_PARAMS = "structureDbSearchParams";
  private StructureDbSearch structureDbSearchParams;

  public static final String JSON_PROPERTY_CANOPUS_PARAMS = "canopusParams";
  private Canopus canopusParams;

  public static final String JSON_PROPERTY_CONFIG_MAP = "configMap";
  private Map<String, String> configMap = new HashMap<>();

  public JobSubmission() { 
  }

  public JobSubmission compoundIds(List<String> compoundIds) {
    this.compoundIds = JsonNullable.<List<String>>of(compoundIds);
    return this;
  }

  public JobSubmission addCompoundIdsItem(String compoundIdsItem) {
    if (this.compoundIds == null || !this.compoundIds.isPresent()) {
      this.compoundIds = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.compoundIds.get().add(compoundIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Compounds that should be the input for this Job  Will be converted to the respective alignedFeatureIds for computation.   At least one compoundId or alignedFeatureId needs to be specified.
   * @return compoundIds
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<String> getCompoundIds() {
        return compoundIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMPOUND_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getCompoundIds_JsonNullable() {
    return compoundIds;
  }
  
  @JsonProperty(JSON_PROPERTY_COMPOUND_IDS)
  public void setCompoundIds_JsonNullable(JsonNullable<List<String>> compoundIds) {
    this.compoundIds = compoundIds;
  }

  public void setCompoundIds(List<String> compoundIds) {
    this.compoundIds = JsonNullable.<List<String>>of(compoundIds);
  }


  public JobSubmission alignedFeatureIds(List<String> alignedFeatureIds) {
    this.alignedFeatureIds = JsonNullable.<List<String>>of(alignedFeatureIds);
    return this;
  }

  public JobSubmission addAlignedFeatureIdsItem(String alignedFeatureIdsItem) {
    if (this.alignedFeatureIds == null || !this.alignedFeatureIds.isPresent()) {
      this.alignedFeatureIds = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.alignedFeatureIds.get().add(alignedFeatureIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Features (aligned over runs) that should be the input for this Job   At least one compoundId or alignedFeatureId needs to be specified.
   * @return alignedFeatureIds
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<String> getAlignedFeatureIds() {
        return alignedFeatureIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALIGNED_FEATURE_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getAlignedFeatureIds_JsonNullable() {
    return alignedFeatureIds;
  }
  
  @JsonProperty(JSON_PROPERTY_ALIGNED_FEATURE_IDS)
  public void setAlignedFeatureIds_JsonNullable(JsonNullable<List<String>> alignedFeatureIds) {
    this.alignedFeatureIds = alignedFeatureIds;
  }

  public void setAlignedFeatureIds(List<String> alignedFeatureIds) {
    this.alignedFeatureIds = JsonNullable.<List<String>>of(alignedFeatureIds);
  }


  public JobSubmission fallbackAdducts(List<String> fallbackAdducts) {
    this.fallbackAdducts = fallbackAdducts;
    return this;
  }

  public JobSubmission addFallbackAdductsItem(String fallbackAdductsItem) {
    if (this.fallbackAdducts == null) {
      this.fallbackAdducts = new ArrayList<>();
    }
    this.fallbackAdducts.add(fallbackAdductsItem);
    return this;
  }

   /**
   * Describes how to deal with Adducts: Fallback adducts are considered if the auto detection did not find any indication for an ion mode.  Pos Examples: [M+H]+,[M]+,[M+K]+,[M+Na]+,[M+H-H2O]+,[M+Na2-H]+,[M+2K-H]+,[M+NH4]+,[M+H3O]+,[M+MeOH+H]+,[M+ACN+H]+,[M+2ACN+H]+,[M+IPA+H]+,[M+ACN+Na]+,[M+DMSO+H]+  Neg Examples: [M-H]-,[M]-,[M+K-2H]-,[M+Cl]-,[M-H2O-H]-,[M+Na-2H]-,M+FA-H]-,[M+Br]-,[M+HAc-H]-,[M+TFA-H]-,[M+ACN-H]-
   * @return fallbackAdducts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FALLBACK_ADDUCTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getFallbackAdducts() {
    return fallbackAdducts;
  }


  @JsonProperty(JSON_PROPERTY_FALLBACK_ADDUCTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFallbackAdducts(List<String> fallbackAdducts) {
    this.fallbackAdducts = fallbackAdducts;
  }


  public JobSubmission enforcedAdducts(List<String> enforcedAdducts) {
    this.enforcedAdducts = enforcedAdducts;
    return this;
  }

  public JobSubmission addEnforcedAdductsItem(String enforcedAdductsItem) {
    if (this.enforcedAdducts == null) {
      this.enforcedAdducts = new ArrayList<>();
    }
    this.enforcedAdducts.add(enforcedAdductsItem);
    return this;
  }

   /**
   * Describes how to deal with Adducts:  Enforced adducts that are always considered.  Pos Examples: [M+H]+,[M]+,[M+K]+,[M+Na]+,[M+H-H2O]+,[M+Na2-H]+,[M+2K-H]+,[M+NH4]+,[M+H3O]+,[M+MeOH+H]+,[M+ACN+H]+,[M+2ACN+H]+,[M+IPA+H]+,[M+ACN+Na]+,[M+DMSO+H]+  Neg Examples: [M-H]-,[M]-,[M+K-2H]-,[M+Cl]-,[M-H2O-H]-,[M+Na-2H]-,M+FA-H]-,[M+Br]-,[M+HAc-H]-,[M+TFA-H]-,[M+ACN-H]-
   * @return enforcedAdducts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENFORCED_ADDUCTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getEnforcedAdducts() {
    return enforcedAdducts;
  }


  @JsonProperty(JSON_PROPERTY_ENFORCED_ADDUCTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnforcedAdducts(List<String> enforcedAdducts) {
    this.enforcedAdducts = enforcedAdducts;
  }


  public JobSubmission detectableAdducts(List<String> detectableAdducts) {
    this.detectableAdducts = detectableAdducts;
    return this;
  }

  public JobSubmission addDetectableAdductsItem(String detectableAdductsItem) {
    if (this.detectableAdducts == null) {
      this.detectableAdducts = new ArrayList<>();
    }
    this.detectableAdducts.add(detectableAdductsItem);
    return this;
  }

   /**
   * Describes how to deal with Adducts: Detectable adducts which are only considered if there is an indication in the MS1 scan (e.g. correct mass delta).  Pos Examples: [M+H]+,[M]+,[M+K]+,[M+Na]+,[M+H-H2O]+,[M+Na2-H]+,[M+2K-H]+,[M+NH4]+,[M+H3O]+,[M+MeOH+H]+,[M+ACN+H]+,[M+2ACN+H]+,[M+IPA+H]+,[M+ACN+Na]+,[M+DMSO+H]+  Neg Examples: [M-H]-,[M]-,[M+K-2H]-,[M+Cl]-,[M-H2O-H]-,[M+Na-2H]-,M+FA-H]-,[M+Br]-,[M+HAc-H]-,[M+TFA-H]-,[M+ACN-H]-
   * @return detectableAdducts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DETECTABLE_ADDUCTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDetectableAdducts() {
    return detectableAdducts;
  }


  @JsonProperty(JSON_PROPERTY_DETECTABLE_ADDUCTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetectableAdducts(List<String> detectableAdducts) {
    this.detectableAdducts = detectableAdducts;
  }


  public JobSubmission recompute(Boolean recompute) {
    this.recompute = recompute;
    return this;
  }

   /**
   * Indicate if already existing result for a tool to be executed should be overwritten or not.
   * @return recompute
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECOMPUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRecompute() {
    return recompute;
  }


  @JsonProperty(JSON_PROPERTY_RECOMPUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecompute(Boolean recompute) {
    this.recompute = recompute;
  }


  public JobSubmission formulaIdParams(Sirius formulaIdParams) {
    this.formulaIdParams = formulaIdParams;
    return this;
  }

   /**
   * Get formulaIdParams
   * @return formulaIdParams
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORMULA_ID_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Sirius getFormulaIdParams() {
    return formulaIdParams;
  }


  @JsonProperty(JSON_PROPERTY_FORMULA_ID_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormulaIdParams(Sirius formulaIdParams) {
    this.formulaIdParams = formulaIdParams;
  }


  public JobSubmission zodiacParams(Zodiac zodiacParams) {
    this.zodiacParams = zodiacParams;
    return this;
  }

   /**
   * Get zodiacParams
   * @return zodiacParams
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ZODIAC_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Zodiac getZodiacParams() {
    return zodiacParams;
  }


  @JsonProperty(JSON_PROPERTY_ZODIAC_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setZodiacParams(Zodiac zodiacParams) {
    this.zodiacParams = zodiacParams;
  }


  public JobSubmission fingerprintPredictionParams(FingerprintPrediction fingerprintPredictionParams) {
    this.fingerprintPredictionParams = fingerprintPredictionParams;
    return this;
  }

   /**
   * Get fingerprintPredictionParams
   * @return fingerprintPredictionParams
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINGERPRINT_PREDICTION_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FingerprintPrediction getFingerprintPredictionParams() {
    return fingerprintPredictionParams;
  }


  @JsonProperty(JSON_PROPERTY_FINGERPRINT_PREDICTION_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFingerprintPredictionParams(FingerprintPrediction fingerprintPredictionParams) {
    this.fingerprintPredictionParams = fingerprintPredictionParams;
  }


  public JobSubmission structureDbSearchParams(StructureDbSearch structureDbSearchParams) {
    this.structureDbSearchParams = structureDbSearchParams;
    return this;
  }

   /**
   * Get structureDbSearchParams
   * @return structureDbSearchParams
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STRUCTURE_DB_SEARCH_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StructureDbSearch getStructureDbSearchParams() {
    return structureDbSearchParams;
  }


  @JsonProperty(JSON_PROPERTY_STRUCTURE_DB_SEARCH_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStructureDbSearchParams(StructureDbSearch structureDbSearchParams) {
    this.structureDbSearchParams = structureDbSearchParams;
  }


  public JobSubmission canopusParams(Canopus canopusParams) {
    this.canopusParams = canopusParams;
    return this;
  }

   /**
   * Get canopusParams
   * @return canopusParams
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CANOPUS_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Canopus getCanopusParams() {
    return canopusParams;
  }


  @JsonProperty(JSON_PROPERTY_CANOPUS_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanopusParams(Canopus canopusParams) {
    this.canopusParams = canopusParams;
  }


  public JobSubmission configMap(Map<String, String> configMap) {
    this.configMap = configMap;
    return this;
  }

  public JobSubmission putConfigMapItem(String key, String configMapItem) {
    if (this.configMap == null) {
      this.configMap = new HashMap<>();
    }
    this.configMap.put(key, configMapItem);
    return this;
  }

   /**
   * As an alternative to the object based parameters, this map allows to store key value pairs  of ALL SIRIUS parameters. All possible parameters can be retrieved from SIRIUS via the respective endpoint.
   * @return configMap
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONFIG_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getConfigMap() {
    return configMap;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigMap(Map<String, String> configMap) {
    this.configMap = configMap;
  }


  /**
   * Return true if this JobSubmission object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSubmission jobSubmission = (JobSubmission) o;
    return equalsNullable(this.compoundIds, jobSubmission.compoundIds) &&
        equalsNullable(this.alignedFeatureIds, jobSubmission.alignedFeatureIds) &&
        Objects.equals(this.fallbackAdducts, jobSubmission.fallbackAdducts) &&
        Objects.equals(this.enforcedAdducts, jobSubmission.enforcedAdducts) &&
        Objects.equals(this.detectableAdducts, jobSubmission.detectableAdducts) &&
        Objects.equals(this.recompute, jobSubmission.recompute) &&
        Objects.equals(this.formulaIdParams, jobSubmission.formulaIdParams) &&
        Objects.equals(this.zodiacParams, jobSubmission.zodiacParams) &&
        Objects.equals(this.fingerprintPredictionParams, jobSubmission.fingerprintPredictionParams) &&
        Objects.equals(this.structureDbSearchParams, jobSubmission.structureDbSearchParams) &&
        Objects.equals(this.canopusParams, jobSubmission.canopusParams) &&
        Objects.equals(this.configMap, jobSubmission.configMap);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(compoundIds), hashCodeNullable(alignedFeatureIds), fallbackAdducts, enforcedAdducts, detectableAdducts, recompute, formulaIdParams, zodiacParams, fingerprintPredictionParams, structureDbSearchParams, canopusParams, configMap);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSubmission {\n");
    sb.append("    compoundIds: ").append(toIndentedString(compoundIds)).append("\n");
    sb.append("    alignedFeatureIds: ").append(toIndentedString(alignedFeatureIds)).append("\n");
    sb.append("    fallbackAdducts: ").append(toIndentedString(fallbackAdducts)).append("\n");
    sb.append("    enforcedAdducts: ").append(toIndentedString(enforcedAdducts)).append("\n");
    sb.append("    detectableAdducts: ").append(toIndentedString(detectableAdducts)).append("\n");
    sb.append("    recompute: ").append(toIndentedString(recompute)).append("\n");
    sb.append("    formulaIdParams: ").append(toIndentedString(formulaIdParams)).append("\n");
    sb.append("    zodiacParams: ").append(toIndentedString(zodiacParams)).append("\n");
    sb.append("    fingerprintPredictionParams: ").append(toIndentedString(fingerprintPredictionParams)).append("\n");
    sb.append("    structureDbSearchParams: ").append(toIndentedString(structureDbSearchParams)).append("\n");
    sb.append("    canopusParams: ").append(toIndentedString(canopusParams)).append("\n");
    sb.append("    configMap: ").append(toIndentedString(configMap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `compoundIds` to the URL query string
    if (getCompoundIds() != null) {
      for (int i = 0; i < getCompoundIds().size(); i++) {
        joiner.add(String.format("%scompoundIds%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getCompoundIds().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `alignedFeatureIds` to the URL query string
    if (getAlignedFeatureIds() != null) {
      for (int i = 0; i < getAlignedFeatureIds().size(); i++) {
        joiner.add(String.format("%salignedFeatureIds%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getAlignedFeatureIds().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `fallbackAdducts` to the URL query string
    if (getFallbackAdducts() != null) {
      for (int i = 0; i < getFallbackAdducts().size(); i++) {
        joiner.add(String.format("%sfallbackAdducts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getFallbackAdducts().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `enforcedAdducts` to the URL query string
    if (getEnforcedAdducts() != null) {
      for (int i = 0; i < getEnforcedAdducts().size(); i++) {
        joiner.add(String.format("%senforcedAdducts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getEnforcedAdducts().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `detectableAdducts` to the URL query string
    if (getDetectableAdducts() != null) {
      for (int i = 0; i < getDetectableAdducts().size(); i++) {
        joiner.add(String.format("%sdetectableAdducts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getDetectableAdducts().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `recompute` to the URL query string
    if (getRecompute() != null) {
      joiner.add(String.format("%srecompute%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRecompute()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `formulaIdParams` to the URL query string
    if (getFormulaIdParams() != null) {
      joiner.add(getFormulaIdParams().toUrlQueryString(prefix + "formulaIdParams" + suffix));
    }

    // add `zodiacParams` to the URL query string
    if (getZodiacParams() != null) {
      joiner.add(getZodiacParams().toUrlQueryString(prefix + "zodiacParams" + suffix));
    }

    // add `fingerprintPredictionParams` to the URL query string
    if (getFingerprintPredictionParams() != null) {
      joiner.add(getFingerprintPredictionParams().toUrlQueryString(prefix + "fingerprintPredictionParams" + suffix));
    }

    // add `structureDbSearchParams` to the URL query string
    if (getStructureDbSearchParams() != null) {
      joiner.add(getStructureDbSearchParams().toUrlQueryString(prefix + "structureDbSearchParams" + suffix));
    }

    // add `canopusParams` to the URL query string
    if (getCanopusParams() != null) {
      joiner.add(getCanopusParams().toUrlQueryString(prefix + "canopusParams" + suffix));
    }

    // add `configMap` to the URL query string
    if (getConfigMap() != null) {
      for (String _key : getConfigMap().keySet()) {
        joiner.add(String.format("%sconfigMap%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getConfigMap().get(_key), URLEncoder.encode(String.valueOf(getConfigMap().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

