/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.unijena.bioinf.ms.nightsky.sdk.model.ImportFormat;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Parameter Object to submit a job that imports ms/ms data from the given format into the specified project  Supported formats (ms, mgf, cef, msp, mzML, mzXML)
 */
@JsonPropertyOrder({
  ImportStringSubmission.JSON_PROPERTY_ALLOW_MS1_ONLY_DATA,
  ImportStringSubmission.JSON_PROPERTY_IGNORE_FORMULAS,
  ImportStringSubmission.JSON_PROPERTY_ALIGN_L_C_M_S_RUNS,
  ImportStringSubmission.JSON_PROPERTY_SOURCE_NAME,
  ImportStringSubmission.JSON_PROPERTY_FORMAT,
  ImportStringSubmission.JSON_PROPERTY_DATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ImportStringSubmission {
  public static final String JSON_PROPERTY_ALLOW_MS1_ONLY_DATA = "allowMs1OnlyData";
  private JsonNullable<Boolean> allowMs1OnlyData = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_IGNORE_FORMULAS = "ignoreFormulas";
  private JsonNullable<Boolean> ignoreFormulas = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_ALIGN_L_C_M_S_RUNS = "alignLCMSRuns";
  private JsonNullable<Boolean> alignLCMSRuns = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_SOURCE_NAME = "sourceName";
  private JsonNullable<String> sourceName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FORMAT = "format";
  private ImportFormat format;

  public static final String JSON_PROPERTY_DATA = "data";
  private String data;

  public ImportStringSubmission() { 
  }

  public ImportStringSubmission allowMs1OnlyData(Boolean allowMs1OnlyData) {
    this.allowMs1OnlyData = JsonNullable.<Boolean>of(allowMs1OnlyData);
    return this;
  }

   /**
   * Get allowMs1OnlyData
   * @return allowMs1OnlyData
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getAllowMs1OnlyData() {
        return allowMs1OnlyData.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALLOW_MS1_ONLY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getAllowMs1OnlyData_JsonNullable() {
    return allowMs1OnlyData;
  }
  
  @JsonProperty(JSON_PROPERTY_ALLOW_MS1_ONLY_DATA)
  public void setAllowMs1OnlyData_JsonNullable(JsonNullable<Boolean> allowMs1OnlyData) {
    this.allowMs1OnlyData = allowMs1OnlyData;
  }

  public void setAllowMs1OnlyData(Boolean allowMs1OnlyData) {
    this.allowMs1OnlyData = JsonNullable.<Boolean>of(allowMs1OnlyData);
  }


  public ImportStringSubmission ignoreFormulas(Boolean ignoreFormulas) {
    this.ignoreFormulas = JsonNullable.<Boolean>of(ignoreFormulas);
    return this;
  }

   /**
   * Get ignoreFormulas
   * @return ignoreFormulas
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getIgnoreFormulas() {
        return ignoreFormulas.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IGNORE_FORMULAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIgnoreFormulas_JsonNullable() {
    return ignoreFormulas;
  }
  
  @JsonProperty(JSON_PROPERTY_IGNORE_FORMULAS)
  public void setIgnoreFormulas_JsonNullable(JsonNullable<Boolean> ignoreFormulas) {
    this.ignoreFormulas = ignoreFormulas;
  }

  public void setIgnoreFormulas(Boolean ignoreFormulas) {
    this.ignoreFormulas = JsonNullable.<Boolean>of(ignoreFormulas);
  }


  public ImportStringSubmission alignLCMSRuns(Boolean alignLCMSRuns) {
    this.alignLCMSRuns = JsonNullable.<Boolean>of(alignLCMSRuns);
    return this;
  }

   /**
   * Get alignLCMSRuns
   * @return alignLCMSRuns
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getAlignLCMSRuns() {
        return alignLCMSRuns.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALIGN_L_C_M_S_RUNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getAlignLCMSRuns_JsonNullable() {
    return alignLCMSRuns;
  }
  
  @JsonProperty(JSON_PROPERTY_ALIGN_L_C_M_S_RUNS)
  public void setAlignLCMSRuns_JsonNullable(JsonNullable<Boolean> alignLCMSRuns) {
    this.alignLCMSRuns = alignLCMSRuns;
  }

  public void setAlignLCMSRuns(Boolean alignLCMSRuns) {
    this.alignLCMSRuns = JsonNullable.<Boolean>of(alignLCMSRuns);
  }


  public ImportStringSubmission sourceName(String sourceName) {
    this.sourceName = JsonNullable.<String>of(sourceName);
    return this;
  }

   /**
   * Name that specifies the data source. Can e.g. be a file path  or just a name.
   * @return sourceName
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSourceName() {
        return sourceName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SOURCE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSourceName_JsonNullable() {
    return sourceName;
  }
  
  @JsonProperty(JSON_PROPERTY_SOURCE_NAME)
  public void setSourceName_JsonNullable(JsonNullable<String> sourceName) {
    this.sourceName = sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = JsonNullable.<String>of(sourceName);
  }


  public ImportStringSubmission format(ImportFormat format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ImportFormat getFormat() {
    return format;
  }


  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFormat(ImportFormat format) {
    this.format = format;
  }


  public ImportStringSubmission data(String data) {
    this.data = data;
    return this;
  }

   /**
   * Data content in specified format
   * @return data
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setData(String data) {
    this.data = data;
  }


  /**
   * Return true if this ImportStringSubmission object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportStringSubmission importStringSubmission = (ImportStringSubmission) o;
    return equalsNullable(this.allowMs1OnlyData, importStringSubmission.allowMs1OnlyData) &&
        equalsNullable(this.ignoreFormulas, importStringSubmission.ignoreFormulas) &&
        equalsNullable(this.alignLCMSRuns, importStringSubmission.alignLCMSRuns) &&
        equalsNullable(this.sourceName, importStringSubmission.sourceName) &&
        Objects.equals(this.format, importStringSubmission.format) &&
        Objects.equals(this.data, importStringSubmission.data);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(allowMs1OnlyData), hashCodeNullable(ignoreFormulas), hashCodeNullable(alignLCMSRuns), hashCodeNullable(sourceName), format, data);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportStringSubmission {\n");
    sb.append("    allowMs1OnlyData: ").append(toIndentedString(allowMs1OnlyData)).append("\n");
    sb.append("    ignoreFormulas: ").append(toIndentedString(ignoreFormulas)).append("\n");
    sb.append("    alignLCMSRuns: ").append(toIndentedString(alignLCMSRuns)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `allowMs1OnlyData` to the URL query string
    if (getAllowMs1OnlyData() != null) {
      joiner.add(String.format("%sallowMs1OnlyData%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAllowMs1OnlyData()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ignoreFormulas` to the URL query string
    if (getIgnoreFormulas() != null) {
      joiner.add(String.format("%signoreFormulas%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIgnoreFormulas()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `alignLCMSRuns` to the URL query string
    if (getAlignLCMSRuns() != null) {
      joiner.add(String.format("%salignLCMSRuns%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlignLCMSRuns()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sourceName` to the URL query string
    if (getSourceName() != null) {
      joiner.add(String.format("%ssourceName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSourceName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `format` to the URL query string
    if (getFormat() != null) {
      joiner.add(String.format("%sformat%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFormat()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `data` to the URL query string
    if (getData() != null) {
      joiner.add(String.format("%sdata%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getData()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

