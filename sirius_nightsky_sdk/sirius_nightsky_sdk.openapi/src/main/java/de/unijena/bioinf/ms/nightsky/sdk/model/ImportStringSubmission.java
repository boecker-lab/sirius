/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.unijena.bioinf.ms.nightsky.sdk.model.ImportFormat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Parameter Object to submit a job that imports ms/ms data from the given format into the specified project  Supported formats (ms, mgf, cef, msp, mzML, mzXML)
 */
@JsonPropertyOrder({
  ImportStringSubmission.JSON_PROPERTY_ALLOW_MS1_ONLY_DATA,
  ImportStringSubmission.JSON_PROPERTY_IGNORE_FORMULAS,
  ImportStringSubmission.JSON_PROPERTY_ALIGN_L_C_M_S_RUNS,
  ImportStringSubmission.JSON_PROPERTY_SOURCE_NAME,
  ImportStringSubmission.JSON_PROPERTY_FORMAT,
  ImportStringSubmission.JSON_PROPERTY_DATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ImportStringSubmission {
  public static final String JSON_PROPERTY_ALLOW_MS1_ONLY_DATA = "allowMs1OnlyData";
  private Boolean allowMs1OnlyData;

  public static final String JSON_PROPERTY_IGNORE_FORMULAS = "ignoreFormulas";
  private Boolean ignoreFormulas;

  public static final String JSON_PROPERTY_ALIGN_L_C_M_S_RUNS = "alignLCMSRuns";
  private Boolean alignLCMSRuns;

  public static final String JSON_PROPERTY_SOURCE_NAME = "sourceName";
  private String sourceName;

  public static final String JSON_PROPERTY_FORMAT = "format";
  private ImportFormat format;

  public static final String JSON_PROPERTY_DATA = "data";
  private String data;

  public ImportStringSubmission() {
  }

  public ImportStringSubmission allowMs1OnlyData(Boolean allowMs1OnlyData) {
    
    this.allowMs1OnlyData = allowMs1OnlyData;
    return this;
  }

   /**
   * Get allowMs1OnlyData
   * @return allowMs1OnlyData
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_MS1_ONLY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean isAllowMs1OnlyData() {
    return allowMs1OnlyData;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_MS1_ONLY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowMs1OnlyData(Boolean allowMs1OnlyData) {
    this.allowMs1OnlyData = allowMs1OnlyData;
  }


  public ImportStringSubmission ignoreFormulas(Boolean ignoreFormulas) {
    
    this.ignoreFormulas = ignoreFormulas;
    return this;
  }

   /**
   * Get ignoreFormulas
   * @return ignoreFormulas
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_FORMULAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean isIgnoreFormulas() {
    return ignoreFormulas;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_FORMULAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreFormulas(Boolean ignoreFormulas) {
    this.ignoreFormulas = ignoreFormulas;
  }


  public ImportStringSubmission alignLCMSRuns(Boolean alignLCMSRuns) {
    
    this.alignLCMSRuns = alignLCMSRuns;
    return this;
  }

   /**
   * Get alignLCMSRuns
   * @return alignLCMSRuns
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALIGN_L_C_M_S_RUNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean isAlignLCMSRuns() {
    return alignLCMSRuns;
  }


  @JsonProperty(JSON_PROPERTY_ALIGN_L_C_M_S_RUNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlignLCMSRuns(Boolean alignLCMSRuns) {
    this.alignLCMSRuns = alignLCMSRuns;
  }


  public ImportStringSubmission sourceName(String sourceName) {
    
    this.sourceName = sourceName;
    return this;
  }

   /**
   * Name that specifies the data source. Can e.g. be a file path  or just a name.
   * @return sourceName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceName() {
    return sourceName;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }


  public ImportStringSubmission format(ImportFormat format) {
    
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ImportFormat getFormat() {
    return format;
  }


  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFormat(ImportFormat format) {
    this.format = format;
  }


  public ImportStringSubmission data(String data) {
    
    this.data = data;
    return this;
  }

   /**
   * Data content in specified format
   * @return data
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setData(String data) {
    this.data = data;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportStringSubmission importStringSubmission = (ImportStringSubmission) o;
    return Objects.equals(this.allowMs1OnlyData, importStringSubmission.allowMs1OnlyData) &&
        Objects.equals(this.ignoreFormulas, importStringSubmission.ignoreFormulas) &&
        Objects.equals(this.alignLCMSRuns, importStringSubmission.alignLCMSRuns) &&
        Objects.equals(this.sourceName, importStringSubmission.sourceName) &&
        Objects.equals(this.format, importStringSubmission.format) &&
        Objects.equals(this.data, importStringSubmission.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMs1OnlyData, ignoreFormulas, alignLCMSRuns, sourceName, format, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportStringSubmission {\n");
    sb.append("    allowMs1OnlyData: ").append(toIndentedString(allowMs1OnlyData)).append("\n");
    sb.append("    ignoreFormulas: ").append(toIndentedString(ignoreFormulas)).append("\n");
    sb.append("    alignLCMSRuns: ").append(toIndentedString(alignLCMSRuns)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

