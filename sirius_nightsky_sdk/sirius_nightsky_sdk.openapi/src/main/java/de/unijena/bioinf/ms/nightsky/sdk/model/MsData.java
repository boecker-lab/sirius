/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.unijena.bioinf.ms.nightsky.sdk.model.AnnotatedSpectrum;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The MsData wraps all spectral input data belonging to a feature.   Each Feature has:  - One merged MS/MS spectrum (optional)  - One merged MS spectrum (optional)  - many MS/MS spectra  - many MS spectra   Each non-merged spectrum has an index which can be used to access the spectrum.   In the future we might add some additional information like chromatographic peak or something similar
 */
@JsonPropertyOrder({
  MsData.JSON_PROPERTY_MERGED_MS1,
  MsData.JSON_PROPERTY_MERGED_MS2,
  MsData.JSON_PROPERTY_MS2_SPECTRA,
  MsData.JSON_PROPERTY_MS1_SPECTRA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MsData {
  public static final String JSON_PROPERTY_MERGED_MS1 = "mergedMs1";
  private AnnotatedSpectrum mergedMs1;

  public static final String JSON_PROPERTY_MERGED_MS2 = "mergedMs2";
  private AnnotatedSpectrum mergedMs2;

  public static final String JSON_PROPERTY_MS2_SPECTRA = "ms2Spectra";
  private List<AnnotatedSpectrum> ms2Spectra;

  public static final String JSON_PROPERTY_MS1_SPECTRA = "ms1Spectra";
  private List<AnnotatedSpectrum> ms1Spectra;

  public MsData() { 
  }

  public MsData mergedMs1(AnnotatedSpectrum mergedMs1) {
    this.mergedMs1 = mergedMs1;
    return this;
  }

   /**
   * Get mergedMs1
   * @return mergedMs1
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERGED_MS1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AnnotatedSpectrum getMergedMs1() {
    return mergedMs1;
  }


  @JsonProperty(JSON_PROPERTY_MERGED_MS1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMergedMs1(AnnotatedSpectrum mergedMs1) {
    this.mergedMs1 = mergedMs1;
  }


  public MsData mergedMs2(AnnotatedSpectrum mergedMs2) {
    this.mergedMs2 = mergedMs2;
    return this;
  }

   /**
   * Get mergedMs2
   * @return mergedMs2
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERGED_MS2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AnnotatedSpectrum getMergedMs2() {
    return mergedMs2;
  }


  @JsonProperty(JSON_PROPERTY_MERGED_MS2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMergedMs2(AnnotatedSpectrum mergedMs2) {
    this.mergedMs2 = mergedMs2;
  }


  public MsData ms2Spectra(List<AnnotatedSpectrum> ms2Spectra) {
    this.ms2Spectra = ms2Spectra;
    return this;
  }

  public MsData addMs2SpectraItem(AnnotatedSpectrum ms2SpectraItem) {
    if (this.ms2Spectra == null) {
      this.ms2Spectra = new ArrayList<>();
    }
    this.ms2Spectra.add(ms2SpectraItem);
    return this;
  }

   /**
   * Get ms2Spectra
   * @return ms2Spectra
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MS2_SPECTRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AnnotatedSpectrum> getMs2Spectra() {
    return ms2Spectra;
  }


  @JsonProperty(JSON_PROPERTY_MS2_SPECTRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMs2Spectra(List<AnnotatedSpectrum> ms2Spectra) {
    this.ms2Spectra = ms2Spectra;
  }


  public MsData ms1Spectra(List<AnnotatedSpectrum> ms1Spectra) {
    this.ms1Spectra = ms1Spectra;
    return this;
  }

  public MsData addMs1SpectraItem(AnnotatedSpectrum ms1SpectraItem) {
    if (this.ms1Spectra == null) {
      this.ms1Spectra = new ArrayList<>();
    }
    this.ms1Spectra.add(ms1SpectraItem);
    return this;
  }

   /**
   * Get ms1Spectra
   * @return ms1Spectra
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MS1_SPECTRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AnnotatedSpectrum> getMs1Spectra() {
    return ms1Spectra;
  }


  @JsonProperty(JSON_PROPERTY_MS1_SPECTRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMs1Spectra(List<AnnotatedSpectrum> ms1Spectra) {
    this.ms1Spectra = ms1Spectra;
  }


  /**
   * Return true if this MsData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MsData msData = (MsData) o;
    return Objects.equals(this.mergedMs1, msData.mergedMs1) &&
        Objects.equals(this.mergedMs2, msData.mergedMs2) &&
        Objects.equals(this.ms2Spectra, msData.ms2Spectra) &&
        Objects.equals(this.ms1Spectra, msData.ms1Spectra);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mergedMs1, mergedMs2, ms2Spectra, ms1Spectra);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MsData {\n");
    sb.append("    mergedMs1: ").append(toIndentedString(mergedMs1)).append("\n");
    sb.append("    mergedMs2: ").append(toIndentedString(mergedMs2)).append("\n");
    sb.append("    ms2Spectra: ").append(toIndentedString(ms2Spectra)).append("\n");
    sb.append("    ms1Spectra: ").append(toIndentedString(ms1Spectra)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `mergedMs1` to the URL query string
    if (getMergedMs1() != null) {
      joiner.add(getMergedMs1().toUrlQueryString(prefix + "mergedMs1" + suffix));
    }

    // add `mergedMs2` to the URL query string
    if (getMergedMs2() != null) {
      joiner.add(getMergedMs2().toUrlQueryString(prefix + "mergedMs2" + suffix));
    }

    // add `ms2Spectra` to the URL query string
    if (getMs2Spectra() != null) {
      for (int i = 0; i < getMs2Spectra().size(); i++) {
        if (getMs2Spectra().get(i) != null) {
          joiner.add(getMs2Spectra().get(i).toUrlQueryString(String.format("%sms2Spectra%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `ms1Spectra` to the URL query string
    if (getMs1Spectra() != null) {
      for (int i = 0; i < getMs1Spectra().size(); i++) {
        if (getMs1Spectra().get(i) != null) {
          joiner.add(getMs1Spectra().get(i).toUrlQueryString(String.format("%sms1Spectra%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

