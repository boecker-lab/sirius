/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * 
 */
@JsonPropertyOrder({
  SearchableDatabase.JSON_PROPERTY_DISPLAY_NAME,
  SearchableDatabase.JSON_PROPERTY_LOCATION,
  SearchableDatabase.JSON_PROPERTY_MATCH_RT_OF_REFERENCE_SPECTRA,
  SearchableDatabase.JSON_PROPERTY_DATABASE_ID,
  SearchableDatabase.JSON_PROPERTY_USER_DB,
  SearchableDatabase.JSON_PROPERTY_IMPORT_DATE,
  SearchableDatabase.JSON_PROPERTY_NUMBER_OF_STRUCTURES,
  SearchableDatabase.JSON_PROPERTY_NUMBER_OF_FORMULAS,
  SearchableDatabase.JSON_PROPERTY_NUMBER_OF_REFERENCE_SPECTRA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SearchableDatabase {
  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private String location;

  public static final String JSON_PROPERTY_MATCH_RT_OF_REFERENCE_SPECTRA = "matchRtOfReferenceSpectra";
  private Boolean matchRtOfReferenceSpectra;

  public static final String JSON_PROPERTY_DATABASE_ID = "databaseId";
  private String databaseId;

  public static final String JSON_PROPERTY_USER_DB = "userDb";
  private Boolean userDb;

  public static final String JSON_PROPERTY_IMPORT_DATE = "importDate";
  private String importDate;

  public static final String JSON_PROPERTY_NUMBER_OF_STRUCTURES = "numberOfStructures";
  private Long numberOfStructures;

  public static final String JSON_PROPERTY_NUMBER_OF_FORMULAS = "numberOfFormulas";
  private Long numberOfFormulas;

  public static final String JSON_PROPERTY_NUMBER_OF_REFERENCE_SPECTRA = "numberOfReferenceSpectra";
  private Long numberOfReferenceSpectra;

  public SearchableDatabase() {
  }

  public SearchableDatabase displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * display name of the database  Should be short
   * @return displayName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public SearchableDatabase location(String location) {
    
    this.location = location;
    return this;
  }

   /**
   * Storage location of user database  Might be NULL for non-user databases or if default location is used.
   * @return location
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocation() {
    return location;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocation(String location) {
    this.location = location;
  }


  public SearchableDatabase matchRtOfReferenceSpectra(Boolean matchRtOfReferenceSpectra) {
    
    this.matchRtOfReferenceSpectra = matchRtOfReferenceSpectra;
    return this;
  }

   /**
   * Indicates whether this database shall be used to use retention time information for library matching.  Typically used for in-house spectral libraries that have been measured on
   * @return matchRtOfReferenceSpectra
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MATCH_RT_OF_REFERENCE_SPECTRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean isMatchRtOfReferenceSpectra() {
    return matchRtOfReferenceSpectra;
  }


  @JsonProperty(JSON_PROPERTY_MATCH_RT_OF_REFERENCE_SPECTRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchRtOfReferenceSpectra(Boolean matchRtOfReferenceSpectra) {
    this.matchRtOfReferenceSpectra = matchRtOfReferenceSpectra;
  }


  public SearchableDatabase databaseId(String databaseId) {
    
    this.databaseId = databaseId;
    return this;
  }

   /**
   * A unique identifier or name of the database.  Should only contain file path and url save characters  For user databases this is usually the file name.
   * @return databaseId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDatabaseId() {
    return databaseId;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDatabaseId(String databaseId) {
    this.databaseId = databaseId;
  }


  public SearchableDatabase userDb(Boolean userDb) {
    
    this.userDb = userDb;
    return this;
  }

   /**
   * Indicates whether the database is a user database that is modifiable or if it is a  database that is included in SIRIUS which cannot be modified.
   * @return userDb
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_DB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isUserDb() {
    return userDb;
  }


  @JsonProperty(JSON_PROPERTY_USER_DB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserDb(Boolean userDb) {
    this.userDb = userDb;
  }


  public SearchableDatabase importDate(String importDate) {
    
    this.importDate = importDate;
    return this;
  }

   /**
   * Date on which the data was imported / database was created.
   * @return importDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMPORT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImportDate() {
    return importDate;
  }


  @JsonProperty(JSON_PROPERTY_IMPORT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImportDate(String importDate) {
    this.importDate = importDate;
  }


  public SearchableDatabase numberOfStructures(Long numberOfStructures) {
    
    this.numberOfStructures = numberOfStructures;
    return this;
  }

   /**
   * Number of unique compounds available in this database.
   * @return numberOfStructures
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_STRUCTURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getNumberOfStructures() {
    return numberOfStructures;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_STRUCTURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfStructures(Long numberOfStructures) {
    this.numberOfStructures = numberOfStructures;
  }


  public SearchableDatabase numberOfFormulas(Long numberOfFormulas) {
    
    this.numberOfFormulas = numberOfFormulas;
    return this;
  }

   /**
   * Number of different molecular formulas available in this database.
   * @return numberOfFormulas
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_FORMULAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getNumberOfFormulas() {
    return numberOfFormulas;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_FORMULAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfFormulas(Long numberOfFormulas) {
    this.numberOfFormulas = numberOfFormulas;
  }


  public SearchableDatabase numberOfReferenceSpectra(Long numberOfReferenceSpectra) {
    
    this.numberOfReferenceSpectra = numberOfReferenceSpectra;
    return this;
  }

   /**
   * Number of reference spectra available in this database
   * @return numberOfReferenceSpectra
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_REFERENCE_SPECTRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getNumberOfReferenceSpectra() {
    return numberOfReferenceSpectra;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_REFERENCE_SPECTRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfReferenceSpectra(Long numberOfReferenceSpectra) {
    this.numberOfReferenceSpectra = numberOfReferenceSpectra;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchableDatabase searchableDatabase = (SearchableDatabase) o;
    return Objects.equals(this.displayName, searchableDatabase.displayName) &&
        Objects.equals(this.location, searchableDatabase.location) &&
        Objects.equals(this.matchRtOfReferenceSpectra, searchableDatabase.matchRtOfReferenceSpectra) &&
        Objects.equals(this.databaseId, searchableDatabase.databaseId) &&
        Objects.equals(this.userDb, searchableDatabase.userDb) &&
        Objects.equals(this.importDate, searchableDatabase.importDate) &&
        Objects.equals(this.numberOfStructures, searchableDatabase.numberOfStructures) &&
        Objects.equals(this.numberOfFormulas, searchableDatabase.numberOfFormulas) &&
        Objects.equals(this.numberOfReferenceSpectra, searchableDatabase.numberOfReferenceSpectra);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, location, matchRtOfReferenceSpectra, databaseId, userDb, importDate, numberOfStructures, numberOfFormulas, numberOfReferenceSpectra);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchableDatabase {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    matchRtOfReferenceSpectra: ").append(toIndentedString(matchRtOfReferenceSpectra)).append("\n");
    sb.append("    databaseId: ").append(toIndentedString(databaseId)).append("\n");
    sb.append("    userDb: ").append(toIndentedString(userDb)).append("\n");
    sb.append("    importDate: ").append(toIndentedString(importDate)).append("\n");
    sb.append("    numberOfStructures: ").append(toIndentedString(numberOfStructures)).append("\n");
    sb.append("    numberOfFormulas: ").append(toIndentedString(numberOfFormulas)).append("\n");
    sb.append("    numberOfReferenceSpectra: ").append(toIndentedString(numberOfReferenceSpectra)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

