/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.unijena.bioinf.ms.nightsky.sdk.api;

import de.unijena.bioinf.ms.nightsky.sdk.client.ApiClient;
import de.unijena.bioinf.ms.nightsky.sdk.client.ApiException;
import de.unijena.bioinf.ms.nightsky.sdk.client.ApiResponse;
import de.unijena.bioinf.ms.nightsky.sdk.client.Pair;

import de.unijena.bioinf.ms.nightsky.sdk.model.AlignedFeature;
import de.unijena.bioinf.ms.nightsky.sdk.model.AlignedFeatureOptField;
import de.unijena.bioinf.ms.nightsky.sdk.model.FormulaCandidate;
import de.unijena.bioinf.ms.nightsky.sdk.model.FormulaCandidateOptField;
import de.unijena.bioinf.ms.nightsky.sdk.model.PageAlignedFeature;
import de.unijena.bioinf.ms.nightsky.sdk.model.PageFormulaCandidate;
import de.unijena.bioinf.ms.nightsky.sdk.model.PageStructureCandidateFormula;
import de.unijena.bioinf.ms.nightsky.sdk.model.PageStructureCandidateScored;
import de.unijena.bioinf.ms.nightsky.sdk.model.SearchQueryType;
import de.unijena.bioinf.ms.nightsky.sdk.model.StructureCandidateOptField;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FeaturesApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public FeaturesApi() {
    this(new ApiClient());
  }

  public FeaturesApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Delete feature (aligned over runs) with the given identifier from the specified project-space.
   * Delete feature (aligned over runs) with the given identifier from the specified project-space.
   * @param projectId project-space to delete from. (required)
   * @param alignedFeatureId identifier of feature (aligned over runs) to delete. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAlignedFeature(String projectId, String alignedFeatureId) throws ApiException {
    deleteAlignedFeatureWithHttpInfo(projectId, alignedFeatureId);
  }

  /**
   * Delete feature (aligned over runs) with the given identifier from the specified project-space.
   * Delete feature (aligned over runs) with the given identifier from the specified project-space.
   * @param projectId project-space to delete from. (required)
   * @param alignedFeatureId identifier of feature (aligned over runs) to delete. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAlignedFeatureWithHttpInfo(String projectId, String alignedFeatureId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAlignedFeatureRequestBuilder(projectId, alignedFeatureId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAlignedFeature", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAlignedFeatureRequestBuilder(String projectId, String alignedFeatureId) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling deleteAlignedFeature");
    }
    // verify the required parameter 'alignedFeatureId' is set
    if (alignedFeatureId == null) {
      throw new ApiException(400, "Missing the required parameter 'alignedFeatureId' when calling deleteAlignedFeature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}/aligned-features/{alignedFeatureId}"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()))
        .replace("{alignedFeatureId}", ApiClient.urlEncode(alignedFeatureId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get feature (aligned over runs) with the given identifier from the specified project-space.
   * Get feature (aligned over runs) with the given identifier from the specified project-space.
   * @param projectId project-space to read from. (required)
   * @param alignedFeatureId identifier of feature (aligned over runs) to access. (required)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return AlignedFeature
   * @throws ApiException if fails to make API call
   */
  public AlignedFeature getAlignedFeature(String projectId, String alignedFeatureId, List<AlignedFeatureOptField> optFields) throws ApiException {
    ApiResponse<AlignedFeature> localVarResponse = getAlignedFeatureWithHttpInfo(projectId, alignedFeatureId, optFields);
    return localVarResponse.getData();
  }

  /**
   * Get feature (aligned over runs) with the given identifier from the specified project-space.
   * Get feature (aligned over runs) with the given identifier from the specified project-space.
   * @param projectId project-space to read from. (required)
   * @param alignedFeatureId identifier of feature (aligned over runs) to access. (required)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return ApiResponse&lt;AlignedFeature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AlignedFeature> getAlignedFeatureWithHttpInfo(String projectId, String alignedFeatureId, List<AlignedFeatureOptField> optFields) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAlignedFeatureRequestBuilder(projectId, alignedFeatureId, optFields);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAlignedFeature", localVarResponse);
        }
        return new ApiResponse<AlignedFeature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AlignedFeature>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAlignedFeatureRequestBuilder(String projectId, String alignedFeatureId, List<AlignedFeatureOptField> optFields) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getAlignedFeature");
    }
    // verify the required parameter 'alignedFeatureId' is set
    if (alignedFeatureId == null) {
      throw new ApiException(400, "Missing the required parameter 'alignedFeatureId' when calling getAlignedFeature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}/aligned-features/{alignedFeatureId}"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()))
        .replace("{alignedFeatureId}", ApiClient.urlEncode(alignedFeatureId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "optFields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "optFields", optFields));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all available features (aligned over runs) in the given project-space.
   * Get all available features (aligned over runs) in the given project-space.
   * @param projectId project-space to read from. (required)
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return PageAlignedFeature
   * @throws ApiException if fails to make API call
   */
  public PageAlignedFeature getAlignedFeatures(String projectId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<AlignedFeatureOptField> optFields) throws ApiException {
    ApiResponse<PageAlignedFeature> localVarResponse = getAlignedFeaturesWithHttpInfo(projectId, page, size, sort, searchQuery, querySyntax, optFields);
    return localVarResponse.getData();
  }

  /**
   * Get all available features (aligned over runs) in the given project-space.
   * Get all available features (aligned over runs) in the given project-space.
   * @param projectId project-space to read from. (required)
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return ApiResponse&lt;PageAlignedFeature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PageAlignedFeature> getAlignedFeaturesWithHttpInfo(String projectId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<AlignedFeatureOptField> optFields) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAlignedFeaturesRequestBuilder(projectId, page, size, sort, searchQuery, querySyntax, optFields);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAlignedFeatures", localVarResponse);
        }
        return new ApiResponse<PageAlignedFeature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PageAlignedFeature>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAlignedFeaturesRequestBuilder(String projectId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<AlignedFeatureOptField> optFields) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getAlignedFeatures");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}/aligned-features"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "page";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParameterBaseName = "size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParameterBaseName = "sort";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParameterBaseName = "searchQuery";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchQuery", searchQuery));
    localVarQueryParameterBaseName = "querySyntax";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("querySyntax", querySyntax));
    localVarQueryParameterBaseName = "optFields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "optFields", optFields));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * FormulaResultContainers for the given &#39;formulaId&#39; with minimal information.
   * FormulaResultContainers for the given &#39;formulaId&#39; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
   * @param projectId project-space to read from. (required)
   * @param alignedFeatureId feature (aligned over runs) the formula result belongs to. (required)
   * @param formulaId identifier of the requested formula result (required)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return FormulaCandidate
   * @throws ApiException if fails to make API call
   */
  public FormulaCandidate getFormulaCandidate(String projectId, String alignedFeatureId, String formulaId, List<FormulaCandidateOptField> optFields) throws ApiException {
    ApiResponse<FormulaCandidate> localVarResponse = getFormulaCandidateWithHttpInfo(projectId, alignedFeatureId, formulaId, optFields);
    return localVarResponse.getData();
  }

  /**
   * FormulaResultContainers for the given &#39;formulaId&#39; with minimal information.
   * FormulaResultContainers for the given &#39;formulaId&#39; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
   * @param projectId project-space to read from. (required)
   * @param alignedFeatureId feature (aligned over runs) the formula result belongs to. (required)
   * @param formulaId identifier of the requested formula result (required)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return ApiResponse&lt;FormulaCandidate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FormulaCandidate> getFormulaCandidateWithHttpInfo(String projectId, String alignedFeatureId, String formulaId, List<FormulaCandidateOptField> optFields) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getFormulaCandidateRequestBuilder(projectId, alignedFeatureId, formulaId, optFields);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getFormulaCandidate", localVarResponse);
        }
        return new ApiResponse<FormulaCandidate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FormulaCandidate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getFormulaCandidateRequestBuilder(String projectId, String alignedFeatureId, String formulaId, List<FormulaCandidateOptField> optFields) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getFormulaCandidate");
    }
    // verify the required parameter 'alignedFeatureId' is set
    if (alignedFeatureId == null) {
      throw new ApiException(400, "Missing the required parameter 'alignedFeatureId' when calling getFormulaCandidate");
    }
    // verify the required parameter 'formulaId' is set
    if (formulaId == null) {
      throw new ApiException(400, "Missing the required parameter 'formulaId' when calling getFormulaCandidate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}/aligned-features/{alignedFeatureId}/formulas/{formulaId}"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()))
        .replace("{alignedFeatureId}", ApiClient.urlEncode(alignedFeatureId.toString()))
        .replace("{formulaId}", ApiClient.urlEncode(formulaId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "optFields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "optFields", optFields));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List of all FormulaResultContainers available for this feature with minimal information.
   * List of all FormulaResultContainers available for this feature with minimal information.  Can be enriched with an optional results overview.
   * @param projectId project-space to read from. (required)
   * @param alignedFeatureId feature (aligned over runs) the formula result belongs to. (required)
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return PageFormulaCandidate
   * @throws ApiException if fails to make API call
   */
  public PageFormulaCandidate getFormulaCandidates(String projectId, String alignedFeatureId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<FormulaCandidateOptField> optFields) throws ApiException {
    ApiResponse<PageFormulaCandidate> localVarResponse = getFormulaCandidatesWithHttpInfo(projectId, alignedFeatureId, page, size, sort, searchQuery, querySyntax, optFields);
    return localVarResponse.getData();
  }

  /**
   * List of all FormulaResultContainers available for this feature with minimal information.
   * List of all FormulaResultContainers available for this feature with minimal information.  Can be enriched with an optional results overview.
   * @param projectId project-space to read from. (required)
   * @param alignedFeatureId feature (aligned over runs) the formula result belongs to. (required)
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return ApiResponse&lt;PageFormulaCandidate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PageFormulaCandidate> getFormulaCandidatesWithHttpInfo(String projectId, String alignedFeatureId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<FormulaCandidateOptField> optFields) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getFormulaCandidatesRequestBuilder(projectId, alignedFeatureId, page, size, sort, searchQuery, querySyntax, optFields);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getFormulaCandidates", localVarResponse);
        }
        return new ApiResponse<PageFormulaCandidate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PageFormulaCandidate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getFormulaCandidatesRequestBuilder(String projectId, String alignedFeatureId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<FormulaCandidateOptField> optFields) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getFormulaCandidates");
    }
    // verify the required parameter 'alignedFeatureId' is set
    if (alignedFeatureId == null) {
      throw new ApiException(400, "Missing the required parameter 'alignedFeatureId' when calling getFormulaCandidates");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}/aligned-features/{alignedFeatureId}/formulas"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()))
        .replace("{alignedFeatureId}", ApiClient.urlEncode(alignedFeatureId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "page";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParameterBaseName = "size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParameterBaseName = "sort";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParameterBaseName = "searchQuery";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchQuery", searchQuery));
    localVarQueryParameterBaseName = "querySyntax";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("querySyntax", querySyntax));
    localVarQueryParameterBaseName = "optFields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "optFields", optFields));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List of StructureCandidates for the given &#39;alignedFeatureId&#39; with minimal information.
   * List of StructureCandidates for the given &#39;alignedFeatureId&#39; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links.
   * @param projectId project-space to read from. (required)
   * @param alignedFeatureId feature (aligned over runs) the structure candidates belong to. (required)
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return PageStructureCandidateFormula
   * @throws ApiException if fails to make API call
   */
  public PageStructureCandidateFormula getStructureCandidates(String projectId, String alignedFeatureId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<StructureCandidateOptField> optFields) throws ApiException {
    ApiResponse<PageStructureCandidateFormula> localVarResponse = getStructureCandidatesWithHttpInfo(projectId, alignedFeatureId, page, size, sort, searchQuery, querySyntax, optFields);
    return localVarResponse.getData();
  }

  /**
   * List of StructureCandidates for the given &#39;alignedFeatureId&#39; with minimal information.
   * List of StructureCandidates for the given &#39;alignedFeatureId&#39; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links.
   * @param projectId project-space to read from. (required)
   * @param alignedFeatureId feature (aligned over runs) the structure candidates belong to. (required)
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return ApiResponse&lt;PageStructureCandidateFormula&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PageStructureCandidateFormula> getStructureCandidatesWithHttpInfo(String projectId, String alignedFeatureId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<StructureCandidateOptField> optFields) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStructureCandidatesRequestBuilder(projectId, alignedFeatureId, page, size, sort, searchQuery, querySyntax, optFields);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getStructureCandidates", localVarResponse);
        }
        return new ApiResponse<PageStructureCandidateFormula>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PageStructureCandidateFormula>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStructureCandidatesRequestBuilder(String projectId, String alignedFeatureId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<StructureCandidateOptField> optFields) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getStructureCandidates");
    }
    // verify the required parameter 'alignedFeatureId' is set
    if (alignedFeatureId == null) {
      throw new ApiException(400, "Missing the required parameter 'alignedFeatureId' when calling getStructureCandidates");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}/aligned-features/{alignedFeatureId}/structures"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()))
        .replace("{alignedFeatureId}", ApiClient.urlEncode(alignedFeatureId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "page";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParameterBaseName = "size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParameterBaseName = "sort";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParameterBaseName = "searchQuery";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchQuery", searchQuery));
    localVarQueryParameterBaseName = "querySyntax";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("querySyntax", querySyntax));
    localVarQueryParameterBaseName = "optFields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "optFields", optFields));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List of StructureCandidates the given &#39;formulaId&#39; with minimal information.
   * List of StructureCandidates the given &#39;formulaId&#39; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links.
   * @param projectId project-space to read from. (required)
   * @param alignedFeatureId feature (aligned over runs) the formula result belongs to. (required)
   * @param formulaId identifier of the requested formula result (required)
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return PageStructureCandidateScored
   * @throws ApiException if fails to make API call
   */
  public PageStructureCandidateScored getStructureCandidatesByFormula(String projectId, String alignedFeatureId, String formulaId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<StructureCandidateOptField> optFields) throws ApiException {
    ApiResponse<PageStructureCandidateScored> localVarResponse = getStructureCandidatesByFormulaWithHttpInfo(projectId, alignedFeatureId, formulaId, page, size, sort, searchQuery, querySyntax, optFields);
    return localVarResponse.getData();
  }

  /**
   * List of StructureCandidates the given &#39;formulaId&#39; with minimal information.
   * List of StructureCandidates the given &#39;formulaId&#39; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links.
   * @param projectId project-space to read from. (required)
   * @param alignedFeatureId feature (aligned over runs) the formula result belongs to. (required)
   * @param formulaId identifier of the requested formula result (required)
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @return ApiResponse&lt;PageStructureCandidateScored&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PageStructureCandidateScored> getStructureCandidatesByFormulaWithHttpInfo(String projectId, String alignedFeatureId, String formulaId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<StructureCandidateOptField> optFields) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStructureCandidatesByFormulaRequestBuilder(projectId, alignedFeatureId, formulaId, page, size, sort, searchQuery, querySyntax, optFields);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getStructureCandidatesByFormula", localVarResponse);
        }
        return new ApiResponse<PageStructureCandidateScored>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PageStructureCandidateScored>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStructureCandidatesByFormulaRequestBuilder(String projectId, String alignedFeatureId, String formulaId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<StructureCandidateOptField> optFields) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getStructureCandidatesByFormula");
    }
    // verify the required parameter 'alignedFeatureId' is set
    if (alignedFeatureId == null) {
      throw new ApiException(400, "Missing the required parameter 'alignedFeatureId' when calling getStructureCandidatesByFormula");
    }
    // verify the required parameter 'formulaId' is set
    if (formulaId == null) {
      throw new ApiException(400, "Missing the required parameter 'formulaId' when calling getStructureCandidatesByFormula");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}/aligned-features/{alignedFeatureId}/formulas/{formulaId}/structures"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()))
        .replace("{alignedFeatureId}", ApiClient.urlEncode(alignedFeatureId.toString()))
        .replace("{formulaId}", ApiClient.urlEncode(formulaId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "page";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParameterBaseName = "size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParameterBaseName = "sort";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParameterBaseName = "searchQuery";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchQuery", searchQuery));
    localVarQueryParameterBaseName = "querySyntax";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("querySyntax", querySyntax));
    localVarQueryParameterBaseName = "optFields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "optFields", optFields));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
