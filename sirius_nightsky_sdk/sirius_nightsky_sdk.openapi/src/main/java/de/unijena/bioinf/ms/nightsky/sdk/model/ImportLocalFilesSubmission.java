/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * 
 */
@JsonPropertyOrder({
  ImportLocalFilesSubmission.JSON_PROPERTY_ALLOW_MS1_ONLY_DATA,
  ImportLocalFilesSubmission.JSON_PROPERTY_IGNORE_FORMULAS,
  ImportLocalFilesSubmission.JSON_PROPERTY_ALIGN_L_C_M_S_RUNS,
  ImportLocalFilesSubmission.JSON_PROPERTY_INPUT_PATHS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ImportLocalFilesSubmission {
  public static final String JSON_PROPERTY_ALLOW_MS1_ONLY_DATA = "allowMs1OnlyData";
  private Boolean allowMs1OnlyData;

  public static final String JSON_PROPERTY_IGNORE_FORMULAS = "ignoreFormulas";
  private Boolean ignoreFormulas;

  public static final String JSON_PROPERTY_ALIGN_L_C_M_S_RUNS = "alignLCMSRuns";
  private Boolean alignLCMSRuns;

  public static final String JSON_PROPERTY_INPUT_PATHS = "inputPaths";
  private List<String> inputPaths = new ArrayList<>();

  public ImportLocalFilesSubmission() {
  }

  public ImportLocalFilesSubmission allowMs1OnlyData(Boolean allowMs1OnlyData) {
    
    this.allowMs1OnlyData = allowMs1OnlyData;
    return this;
  }

   /**
   * Get allowMs1OnlyData
   * @return allowMs1OnlyData
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_MS1_ONLY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean isAllowMs1OnlyData() {
    return allowMs1OnlyData;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_MS1_ONLY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowMs1OnlyData(Boolean allowMs1OnlyData) {
    this.allowMs1OnlyData = allowMs1OnlyData;
  }


  public ImportLocalFilesSubmission ignoreFormulas(Boolean ignoreFormulas) {
    
    this.ignoreFormulas = ignoreFormulas;
    return this;
  }

   /**
   * Get ignoreFormulas
   * @return ignoreFormulas
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_FORMULAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean isIgnoreFormulas() {
    return ignoreFormulas;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_FORMULAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreFormulas(Boolean ignoreFormulas) {
    this.ignoreFormulas = ignoreFormulas;
  }


  public ImportLocalFilesSubmission alignLCMSRuns(Boolean alignLCMSRuns) {
    
    this.alignLCMSRuns = alignLCMSRuns;
    return this;
  }

   /**
   * Get alignLCMSRuns
   * @return alignLCMSRuns
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALIGN_L_C_M_S_RUNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean isAlignLCMSRuns() {
    return alignLCMSRuns;
  }


  @JsonProperty(JSON_PROPERTY_ALIGN_L_C_M_S_RUNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlignLCMSRuns(Boolean alignLCMSRuns) {
    this.alignLCMSRuns = alignLCMSRuns;
  }


  public ImportLocalFilesSubmission inputPaths(List<String> inputPaths) {
    
    this.inputPaths = inputPaths;
    return this;
  }

  public ImportLocalFilesSubmission addInputPathsItem(String inputPathsItem) {
    if (this.inputPaths == null) {
      this.inputPaths = new ArrayList<>();
    }
    this.inputPaths.add(inputPathsItem);
    return this;
  }

   /**
   * Get inputPaths
   * @return inputPaths
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUT_PATHS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getInputPaths() {
    return inputPaths;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_PATHS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInputPaths(List<String> inputPaths) {
    this.inputPaths = inputPaths;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportLocalFilesSubmission importLocalFilesSubmission = (ImportLocalFilesSubmission) o;
    return Objects.equals(this.allowMs1OnlyData, importLocalFilesSubmission.allowMs1OnlyData) &&
        Objects.equals(this.ignoreFormulas, importLocalFilesSubmission.ignoreFormulas) &&
        Objects.equals(this.alignLCMSRuns, importLocalFilesSubmission.alignLCMSRuns) &&
        Objects.equals(this.inputPaths, importLocalFilesSubmission.inputPaths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMs1OnlyData, ignoreFormulas, alignLCMSRuns, inputPaths);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportLocalFilesSubmission {\n");
    sb.append("    allowMs1OnlyData: ").append(toIndentedString(allowMs1OnlyData)).append("\n");
    sb.append("    ignoreFormulas: ").append(toIndentedString(ignoreFormulas)).append("\n");
    sb.append("    alignLCMSRuns: ").append(toIndentedString(alignLCMSRuns)).append("\n");
    sb.append("    inputPaths: ").append(toIndentedString(inputPaths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

