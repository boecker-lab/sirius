/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * 
 */
@JsonPropertyOrder({
  ImportLocalFilesSubmission.JSON_PROPERTY_ALLOW_MS1_ONLY_DATA,
  ImportLocalFilesSubmission.JSON_PROPERTY_IGNORE_FORMULAS,
  ImportLocalFilesSubmission.JSON_PROPERTY_ALIGN_L_C_M_S_RUNS,
  ImportLocalFilesSubmission.JSON_PROPERTY_INPUT_PATHS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ImportLocalFilesSubmission {
  public static final String JSON_PROPERTY_ALLOW_MS1_ONLY_DATA = "allowMs1OnlyData";
  private JsonNullable<Boolean> allowMs1OnlyData = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_IGNORE_FORMULAS = "ignoreFormulas";
  private JsonNullable<Boolean> ignoreFormulas = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_ALIGN_L_C_M_S_RUNS = "alignLCMSRuns";
  private JsonNullable<Boolean> alignLCMSRuns = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_INPUT_PATHS = "inputPaths";
  private List<String> inputPaths = new ArrayList<>();

  public ImportLocalFilesSubmission() { 
  }

  public ImportLocalFilesSubmission allowMs1OnlyData(Boolean allowMs1OnlyData) {
    this.allowMs1OnlyData = JsonNullable.<Boolean>of(allowMs1OnlyData);
    return this;
  }

   /**
   * Get allowMs1OnlyData
   * @return allowMs1OnlyData
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getAllowMs1OnlyData() {
        return allowMs1OnlyData.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALLOW_MS1_ONLY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getAllowMs1OnlyData_JsonNullable() {
    return allowMs1OnlyData;
  }
  
  @JsonProperty(JSON_PROPERTY_ALLOW_MS1_ONLY_DATA)
  public void setAllowMs1OnlyData_JsonNullable(JsonNullable<Boolean> allowMs1OnlyData) {
    this.allowMs1OnlyData = allowMs1OnlyData;
  }

  public void setAllowMs1OnlyData(Boolean allowMs1OnlyData) {
    this.allowMs1OnlyData = JsonNullable.<Boolean>of(allowMs1OnlyData);
  }


  public ImportLocalFilesSubmission ignoreFormulas(Boolean ignoreFormulas) {
    this.ignoreFormulas = JsonNullable.<Boolean>of(ignoreFormulas);
    return this;
  }

   /**
   * Get ignoreFormulas
   * @return ignoreFormulas
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getIgnoreFormulas() {
        return ignoreFormulas.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IGNORE_FORMULAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIgnoreFormulas_JsonNullable() {
    return ignoreFormulas;
  }
  
  @JsonProperty(JSON_PROPERTY_IGNORE_FORMULAS)
  public void setIgnoreFormulas_JsonNullable(JsonNullable<Boolean> ignoreFormulas) {
    this.ignoreFormulas = ignoreFormulas;
  }

  public void setIgnoreFormulas(Boolean ignoreFormulas) {
    this.ignoreFormulas = JsonNullable.<Boolean>of(ignoreFormulas);
  }


  public ImportLocalFilesSubmission alignLCMSRuns(Boolean alignLCMSRuns) {
    this.alignLCMSRuns = JsonNullable.<Boolean>of(alignLCMSRuns);
    return this;
  }

   /**
   * Get alignLCMSRuns
   * @return alignLCMSRuns
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getAlignLCMSRuns() {
        return alignLCMSRuns.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALIGN_L_C_M_S_RUNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getAlignLCMSRuns_JsonNullable() {
    return alignLCMSRuns;
  }
  
  @JsonProperty(JSON_PROPERTY_ALIGN_L_C_M_S_RUNS)
  public void setAlignLCMSRuns_JsonNullable(JsonNullable<Boolean> alignLCMSRuns) {
    this.alignLCMSRuns = alignLCMSRuns;
  }

  public void setAlignLCMSRuns(Boolean alignLCMSRuns) {
    this.alignLCMSRuns = JsonNullable.<Boolean>of(alignLCMSRuns);
  }


  public ImportLocalFilesSubmission inputPaths(List<String> inputPaths) {
    this.inputPaths = inputPaths;
    return this;
  }

  public ImportLocalFilesSubmission addInputPathsItem(String inputPathsItem) {
    if (this.inputPaths == null) {
      this.inputPaths = new ArrayList<>();
    }
    this.inputPaths.add(inputPathsItem);
    return this;
  }

   /**
   * Get inputPaths
   * @return inputPaths
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUT_PATHS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getInputPaths() {
    return inputPaths;
  }


  @JsonProperty(JSON_PROPERTY_INPUT_PATHS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInputPaths(List<String> inputPaths) {
    this.inputPaths = inputPaths;
  }


  /**
   * Return true if this ImportLocalFilesSubmission object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportLocalFilesSubmission importLocalFilesSubmission = (ImportLocalFilesSubmission) o;
    return equalsNullable(this.allowMs1OnlyData, importLocalFilesSubmission.allowMs1OnlyData) &&
        equalsNullable(this.ignoreFormulas, importLocalFilesSubmission.ignoreFormulas) &&
        equalsNullable(this.alignLCMSRuns, importLocalFilesSubmission.alignLCMSRuns) &&
        Objects.equals(this.inputPaths, importLocalFilesSubmission.inputPaths);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(allowMs1OnlyData), hashCodeNullable(ignoreFormulas), hashCodeNullable(alignLCMSRuns), inputPaths);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportLocalFilesSubmission {\n");
    sb.append("    allowMs1OnlyData: ").append(toIndentedString(allowMs1OnlyData)).append("\n");
    sb.append("    ignoreFormulas: ").append(toIndentedString(ignoreFormulas)).append("\n");
    sb.append("    alignLCMSRuns: ").append(toIndentedString(alignLCMSRuns)).append("\n");
    sb.append("    inputPaths: ").append(toIndentedString(inputPaths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `allowMs1OnlyData` to the URL query string
    if (getAllowMs1OnlyData() != null) {
      joiner.add(String.format("%sallowMs1OnlyData%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAllowMs1OnlyData()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ignoreFormulas` to the URL query string
    if (getIgnoreFormulas() != null) {
      joiner.add(String.format("%signoreFormulas%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIgnoreFormulas()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `alignLCMSRuns` to the URL query string
    if (getAlignLCMSRuns() != null) {
      joiner.add(String.format("%salignLCMSRuns%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlignLCMSRuns()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `inputPaths` to the URL query string
    if (getInputPaths() != null) {
      for (int i = 0; i < getInputPaths().size(); i++) {
        joiner.add(String.format("%sinputPaths%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getInputPaths().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

