/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.unijena.bioinf.ms.nightsky.sdk.api;

import de.unijena.bioinf.ms.nightsky.sdk.client.ApiClient;
import de.unijena.bioinf.ms.nightsky.sdk.client.ApiException;
import de.unijena.bioinf.ms.nightsky.sdk.client.ApiResponse;
import de.unijena.bioinf.ms.nightsky.sdk.client.Pair;

import de.unijena.bioinf.ms.nightsky.sdk.model.PageProjectInfo;
import de.unijena.bioinf.ms.nightsky.sdk.model.ProjectInfo;
import de.unijena.bioinf.ms.nightsky.sdk.model.SearchQueryType;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProjectsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ProjectsApi() {
    this(new ApiClient());
  }

  public ProjectsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Close project-space and remove it from application.
   * Close project-space and remove it from application. Project will NOT be deleted from disk.   ATTENTION: This will cancel and remove all jobs running on this Project before closing it.  If there are many jobs, this might take some time.
   * @param projectId unique name/identifier of the  project-space to be closed. (required)
   * @throws ApiException if fails to make API call
   */
  public void closeProjectSpace(String projectId) throws ApiException {
    closeProjectSpaceWithHttpInfo(projectId);
  }

  /**
   * Close project-space and remove it from application.
   * Close project-space and remove it from application. Project will NOT be deleted from disk.   ATTENTION: This will cancel and remove all jobs running on this Project before closing it.  If there are many jobs, this might take some time.
   * @param projectId unique name/identifier of the  project-space to be closed. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> closeProjectSpaceWithHttpInfo(String projectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = closeProjectSpaceRequestBuilder(projectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("closeProjectSpace", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder closeProjectSpaceRequestBuilder(String projectId) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling closeProjectSpace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create and open a new project-space at given location and make it accessible via the given projectId.
   * Create and open a new project-space at given location and make it accessible via the given projectId.
   * @param projectId unique name/identifier that shall be used to access the newly created project-space. (required)
   * @param pathToProject  (required)
   * @param pathToSourceProject  (optional)
   * @param awaitImport  (optional, default to true)
   * @return ProjectInfo
   * @throws ApiException if fails to make API call
   */
  public ProjectInfo createProjectSpace(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport) throws ApiException {
    ApiResponse<ProjectInfo> localVarResponse = createProjectSpaceWithHttpInfo(projectId, pathToProject, pathToSourceProject, awaitImport);
    return localVarResponse.getData();
  }

  /**
   * Create and open a new project-space at given location and make it accessible via the given projectId.
   * Create and open a new project-space at given location and make it accessible via the given projectId.
   * @param projectId unique name/identifier that shall be used to access the newly created project-space. (required)
   * @param pathToProject  (required)
   * @param pathToSourceProject  (optional)
   * @param awaitImport  (optional, default to true)
   * @return ApiResponse&lt;ProjectInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProjectInfo> createProjectSpaceWithHttpInfo(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createProjectSpaceRequestBuilder(projectId, pathToProject, pathToSourceProject, awaitImport);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createProjectSpace", localVarResponse);
        }
        return new ApiResponse<ProjectInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProjectInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createProjectSpaceRequestBuilder(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling createProjectSpace");
    }
    // verify the required parameter 'pathToProject' is set
    if (pathToProject == null) {
      throw new ApiException(400, "Missing the required parameter 'pathToProject' when calling createProjectSpace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "pathToProject";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pathToProject", pathToProject));
    localVarQueryParameterBaseName = "pathToSourceProject";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pathToSourceProject", pathToSourceProject));
    localVarQueryParameterBaseName = "awaitImport";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("awaitImport", awaitImport));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get project space info by its projectId.
   * Get project space info by its projectId.
   * @param projectId unique name/identifier tof the project-space to be accessed. (required)
   * @return ProjectInfo
   * @throws ApiException if fails to make API call
   */
  public ProjectInfo getProjectSpace(String projectId) throws ApiException {
    ApiResponse<ProjectInfo> localVarResponse = getProjectSpaceWithHttpInfo(projectId);
    return localVarResponse.getData();
  }

  /**
   * Get project space info by its projectId.
   * Get project space info by its projectId.
   * @param projectId unique name/identifier tof the project-space to be accessed. (required)
   * @return ApiResponse&lt;ProjectInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProjectInfo> getProjectSpaceWithHttpInfo(String projectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getProjectSpaceRequestBuilder(projectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getProjectSpace", localVarResponse);
        }
        return new ApiResponse<ProjectInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProjectInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getProjectSpaceRequestBuilder(String projectId) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getProjectSpace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List opened project spaces.
   * List opened project spaces.
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @return PageProjectInfo
   * @throws ApiException if fails to make API call
   */
  public PageProjectInfo getProjectSpaces(Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax) throws ApiException {
    ApiResponse<PageProjectInfo> localVarResponse = getProjectSpacesWithHttpInfo(page, size, sort, searchQuery, querySyntax);
    return localVarResponse.getData();
  }

  /**
   * List opened project spaces.
   * List opened project spaces.
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @return ApiResponse&lt;PageProjectInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PageProjectInfo> getProjectSpacesWithHttpInfo(Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getProjectSpacesRequestBuilder(page, size, sort, searchQuery, querySyntax);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getProjectSpaces", localVarResponse);
        }
        return new ApiResponse<PageProjectInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PageProjectInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getProjectSpacesRequestBuilder(Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "page";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParameterBaseName = "size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParameterBaseName = "sort";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParameterBaseName = "searchQuery";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchQuery", searchQuery));
    localVarQueryParameterBaseName = "querySyntax";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("querySyntax", querySyntax));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Open an existing project-space and make it accessible via the given projectId.
   * Open an existing project-space and make it accessible via the given projectId.
   * @param projectId unique name/identifier that shall be used to access the opened project-space. (required)
   * @param pathToProject  (required)
   * @return ProjectInfo
   * @throws ApiException if fails to make API call
   */
  public ProjectInfo openProjectSpace(String projectId, String pathToProject) throws ApiException {
    ApiResponse<ProjectInfo> localVarResponse = openProjectSpaceWithHttpInfo(projectId, pathToProject);
    return localVarResponse.getData();
  }

  /**
   * Open an existing project-space and make it accessible via the given projectId.
   * Open an existing project-space and make it accessible via the given projectId.
   * @param projectId unique name/identifier that shall be used to access the opened project-space. (required)
   * @param pathToProject  (required)
   * @return ApiResponse&lt;ProjectInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProjectInfo> openProjectSpaceWithHttpInfo(String projectId, String pathToProject) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = openProjectSpaceRequestBuilder(projectId, pathToProject);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("openProjectSpace", localVarResponse);
        }
        return new ApiResponse<ProjectInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProjectInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder openProjectSpaceRequestBuilder(String projectId, String pathToProject) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling openProjectSpace");
    }
    // verify the required parameter 'pathToProject' is set
    if (pathToProject == null) {
      throw new ApiException(400, "Missing the required parameter 'pathToProject' when calling openProjectSpace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "pathToProject";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pathToProject", pathToProject));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
