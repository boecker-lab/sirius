/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * 
 */
@JsonPropertyOrder({
  DatabaseImportSubmission.JSON_PROPERTY_DATABASE_ID,
  DatabaseImportSubmission.JSON_PROPERTY_FILES_TO_IMPORT,
  DatabaseImportSubmission.JSON_PROPERTY_WRITE_BUFFER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DatabaseImportSubmission {
  public static final String JSON_PROPERTY_DATABASE_ID = "databaseId";
  private String databaseId;

  public static final String JSON_PROPERTY_FILES_TO_IMPORT = "filesToImport";
  private List<String> filesToImport = new ArrayList<>();

  public static final String JSON_PROPERTY_WRITE_BUFFER = "writeBuffer";
  private Integer writeBuffer;

  public DatabaseImportSubmission() {
  }

  public DatabaseImportSubmission databaseId(String databaseId) {
    
    this.databaseId = databaseId;
    return this;
  }

   /**
   * Get databaseId
   * @return databaseId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDatabaseId() {
    return databaseId;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDatabaseId(String databaseId) {
    this.databaseId = databaseId;
  }


  public DatabaseImportSubmission filesToImport(List<String> filesToImport) {
    
    this.filesToImport = filesToImport;
    return this;
  }

  public DatabaseImportSubmission addFilesToImportItem(String filesToImportItem) {
    if (this.filesToImport == null) {
      this.filesToImport = new ArrayList<>();
    }
    this.filesToImport.add(filesToImportItem);
    return this;
  }

   /**
   * Get filesToImport
   * @return filesToImport
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILES_TO_IMPORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getFilesToImport() {
    return filesToImport;
  }


  @JsonProperty(JSON_PROPERTY_FILES_TO_IMPORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilesToImport(List<String> filesToImport) {
    this.filesToImport = filesToImport;
  }


  public DatabaseImportSubmission writeBuffer(Integer writeBuffer) {
    
    this.writeBuffer = writeBuffer;
    return this;
  }

   /**
   * Get writeBuffer
   * @return writeBuffer
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WRITE_BUFFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWriteBuffer() {
    return writeBuffer;
  }


  @JsonProperty(JSON_PROPERTY_WRITE_BUFFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWriteBuffer(Integer writeBuffer) {
    this.writeBuffer = writeBuffer;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseImportSubmission databaseImportSubmission = (DatabaseImportSubmission) o;
    return Objects.equals(this.databaseId, databaseImportSubmission.databaseId) &&
        Objects.equals(this.filesToImport, databaseImportSubmission.filesToImport) &&
        Objects.equals(this.writeBuffer, databaseImportSubmission.writeBuffer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseId, filesToImport, writeBuffer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseImportSubmission {\n");
    sb.append("    databaseId: ").append(toIndentedString(databaseId)).append("\n");
    sb.append("    filesToImport: ").append(toIndentedString(filesToImport)).append("\n");
    sb.append("    writeBuffer: ").append(toIndentedString(writeBuffer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

