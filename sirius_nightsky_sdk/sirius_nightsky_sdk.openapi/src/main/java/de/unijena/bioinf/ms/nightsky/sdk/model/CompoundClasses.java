/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.unijena.bioinf.ms.nightsky.sdk.model.CompoundClass;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Container class that holds the most likely compound class for different levels of each ontology for a  certain Compound/Feature/FormulaCandidate/PredictedFingerprint.
 */
@JsonPropertyOrder({
  CompoundClasses.JSON_PROPERTY_NPC_PATHWAY,
  CompoundClasses.JSON_PROPERTY_NPC_SUPERCLASS,
  CompoundClasses.JSON_PROPERTY_NPC_CLASS,
  CompoundClasses.JSON_PROPERTY_CLASSY_FIRE_LINEAGE,
  CompoundClasses.JSON_PROPERTY_CLASSY_FIRE_ALTERNATIVES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CompoundClasses {
  public static final String JSON_PROPERTY_NPC_PATHWAY = "npcPathway";
  private CompoundClass npcPathway;

  public static final String JSON_PROPERTY_NPC_SUPERCLASS = "npcSuperclass";
  private CompoundClass npcSuperclass;

  public static final String JSON_PROPERTY_NPC_CLASS = "npcClass";
  private CompoundClass npcClass;

  public static final String JSON_PROPERTY_CLASSY_FIRE_LINEAGE = "classyFireLineage";
  private List<CompoundClass> classyFireLineage;

  public static final String JSON_PROPERTY_CLASSY_FIRE_ALTERNATIVES = "classyFireAlternatives";
  private List<CompoundClass> classyFireAlternatives;

  public CompoundClasses() { 
  }

  public CompoundClasses npcPathway(CompoundClass npcPathway) {
    this.npcPathway = npcPathway;
    return this;
  }

   /**
   * Get npcPathway
   * @return npcPathway
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NPC_PATHWAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CompoundClass getNpcPathway() {
    return npcPathway;
  }


  @JsonProperty(JSON_PROPERTY_NPC_PATHWAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNpcPathway(CompoundClass npcPathway) {
    this.npcPathway = npcPathway;
  }


  public CompoundClasses npcSuperclass(CompoundClass npcSuperclass) {
    this.npcSuperclass = npcSuperclass;
    return this;
  }

   /**
   * Get npcSuperclass
   * @return npcSuperclass
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NPC_SUPERCLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CompoundClass getNpcSuperclass() {
    return npcSuperclass;
  }


  @JsonProperty(JSON_PROPERTY_NPC_SUPERCLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNpcSuperclass(CompoundClass npcSuperclass) {
    this.npcSuperclass = npcSuperclass;
  }


  public CompoundClasses npcClass(CompoundClass npcClass) {
    this.npcClass = npcClass;
    return this;
  }

   /**
   * Get npcClass
   * @return npcClass
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NPC_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CompoundClass getNpcClass() {
    return npcClass;
  }


  @JsonProperty(JSON_PROPERTY_NPC_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNpcClass(CompoundClass npcClass) {
    this.npcClass = npcClass;
  }


  public CompoundClasses classyFireLineage(List<CompoundClass> classyFireLineage) {
    this.classyFireLineage = classyFireLineage;
    return this;
  }

  public CompoundClasses addClassyFireLineageItem(CompoundClass classyFireLineageItem) {
    if (this.classyFireLineage == null) {
      this.classyFireLineage = new ArrayList<>();
    }
    this.classyFireLineage.add(classyFireLineageItem);
    return this;
  }

   /**
   * Most likely ClassyFire lineage from ordered from least specific to most specific class  classyFireLineage.get(classyFireLineage.size() - 1) gives the most specific ClassyFire compound class annotation
   * @return classyFireLineage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLASSY_FIRE_LINEAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CompoundClass> getClassyFireLineage() {
    return classyFireLineage;
  }


  @JsonProperty(JSON_PROPERTY_CLASSY_FIRE_LINEAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClassyFireLineage(List<CompoundClass> classyFireLineage) {
    this.classyFireLineage = classyFireLineage;
  }


  public CompoundClasses classyFireAlternatives(List<CompoundClass> classyFireAlternatives) {
    this.classyFireAlternatives = classyFireAlternatives;
    return this;
  }

  public CompoundClasses addClassyFireAlternativesItem(CompoundClass classyFireAlternativesItem) {
    if (this.classyFireAlternatives == null) {
      this.classyFireAlternatives = new ArrayList<>();
    }
    this.classyFireAlternatives.add(classyFireAlternativesItem);
    return this;
  }

   /**
   * Alternative ClassyFire classes with high probability that do not fit into the linage
   * @return classyFireAlternatives
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLASSY_FIRE_ALTERNATIVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CompoundClass> getClassyFireAlternatives() {
    return classyFireAlternatives;
  }


  @JsonProperty(JSON_PROPERTY_CLASSY_FIRE_ALTERNATIVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClassyFireAlternatives(List<CompoundClass> classyFireAlternatives) {
    this.classyFireAlternatives = classyFireAlternatives;
  }


  /**
   * Return true if this CompoundClasses object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompoundClasses compoundClasses = (CompoundClasses) o;
    return Objects.equals(this.npcPathway, compoundClasses.npcPathway) &&
        Objects.equals(this.npcSuperclass, compoundClasses.npcSuperclass) &&
        Objects.equals(this.npcClass, compoundClasses.npcClass) &&
        Objects.equals(this.classyFireLineage, compoundClasses.classyFireLineage) &&
        Objects.equals(this.classyFireAlternatives, compoundClasses.classyFireAlternatives);
  }

  @Override
  public int hashCode() {
    return Objects.hash(npcPathway, npcSuperclass, npcClass, classyFireLineage, classyFireAlternatives);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompoundClasses {\n");
    sb.append("    npcPathway: ").append(toIndentedString(npcPathway)).append("\n");
    sb.append("    npcSuperclass: ").append(toIndentedString(npcSuperclass)).append("\n");
    sb.append("    npcClass: ").append(toIndentedString(npcClass)).append("\n");
    sb.append("    classyFireLineage: ").append(toIndentedString(classyFireLineage)).append("\n");
    sb.append("    classyFireAlternatives: ").append(toIndentedString(classyFireAlternatives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `npcPathway` to the URL query string
    if (getNpcPathway() != null) {
      joiner.add(getNpcPathway().toUrlQueryString(prefix + "npcPathway" + suffix));
    }

    // add `npcSuperclass` to the URL query string
    if (getNpcSuperclass() != null) {
      joiner.add(getNpcSuperclass().toUrlQueryString(prefix + "npcSuperclass" + suffix));
    }

    // add `npcClass` to the URL query string
    if (getNpcClass() != null) {
      joiner.add(getNpcClass().toUrlQueryString(prefix + "npcClass" + suffix));
    }

    // add `classyFireLineage` to the URL query string
    if (getClassyFireLineage() != null) {
      for (int i = 0; i < getClassyFireLineage().size(); i++) {
        if (getClassyFireLineage().get(i) != null) {
          joiner.add(getClassyFireLineage().get(i).toUrlQueryString(String.format("%sclassyFireLineage%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `classyFireAlternatives` to the URL query string
    if (getClassyFireAlternatives() != null) {
      for (int i = 0; i < getClassyFireAlternatives().size(); i++) {
        if (getClassyFireAlternatives().get(i) != null) {
          joiner.add(getClassyFireAlternatives().get(i).toUrlQueryString(String.format("%sclassyFireAlternatives%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

