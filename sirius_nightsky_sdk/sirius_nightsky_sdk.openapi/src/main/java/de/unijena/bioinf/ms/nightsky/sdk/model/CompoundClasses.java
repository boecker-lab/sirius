/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.unijena.bioinf.ms.nightsky.sdk.model.CompoundClass;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Container class that holds the most likely compound class for different levels of each ontology for a  certain Compound/Feature/FormulaCandidate/PredictedFingerprint.
 */
@JsonPropertyOrder({
  CompoundClasses.JSON_PROPERTY_NPC_PATHWAY,
  CompoundClasses.JSON_PROPERTY_NPC_SUPERCLASS,
  CompoundClasses.JSON_PROPERTY_NPC_CLASS,
  CompoundClasses.JSON_PROPERTY_CLASSY_FIRE_LINEAGE,
  CompoundClasses.JSON_PROPERTY_CLASSY_FIRE_ALTERNATIVES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-11T15:12:24.554845061+01:00[Europe/Berlin]")
public class CompoundClasses {
  public static final String JSON_PROPERTY_NPC_PATHWAY = "npcPathway";
  private JsonNullable<CompoundClass> npcPathway = JsonNullable.<CompoundClass>undefined();

  public static final String JSON_PROPERTY_NPC_SUPERCLASS = "npcSuperclass";
  private JsonNullable<CompoundClass> npcSuperclass = JsonNullable.<CompoundClass>undefined();

  public static final String JSON_PROPERTY_NPC_CLASS = "npcClass";
  private JsonNullable<CompoundClass> npcClass = JsonNullable.<CompoundClass>undefined();

  public static final String JSON_PROPERTY_CLASSY_FIRE_LINEAGE = "classyFireLineage";
  private JsonNullable<List<CompoundClass>> classyFireLineage = JsonNullable.<List<CompoundClass>>undefined();

  public static final String JSON_PROPERTY_CLASSY_FIRE_ALTERNATIVES = "classyFireAlternatives";
  private JsonNullable<List<CompoundClass>> classyFireAlternatives = JsonNullable.<List<CompoundClass>>undefined();

  public CompoundClasses() { 
  }

  public CompoundClasses npcPathway(CompoundClass npcPathway) {
    this.npcPathway = JsonNullable.<CompoundClass>of(npcPathway);
    return this;
  }

   /**
   * Get npcPathway
   * @return npcPathway
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public CompoundClass getNpcPathway() {
        return npcPathway.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NPC_PATHWAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CompoundClass> getNpcPathway_JsonNullable() {
    return npcPathway;
  }
  
  @JsonProperty(JSON_PROPERTY_NPC_PATHWAY)
  public void setNpcPathway_JsonNullable(JsonNullable<CompoundClass> npcPathway) {
    this.npcPathway = npcPathway;
  }

  public void setNpcPathway(CompoundClass npcPathway) {
    this.npcPathway = JsonNullable.<CompoundClass>of(npcPathway);
  }


  public CompoundClasses npcSuperclass(CompoundClass npcSuperclass) {
    this.npcSuperclass = JsonNullable.<CompoundClass>of(npcSuperclass);
    return this;
  }

   /**
   * Get npcSuperclass
   * @return npcSuperclass
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public CompoundClass getNpcSuperclass() {
        return npcSuperclass.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NPC_SUPERCLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CompoundClass> getNpcSuperclass_JsonNullable() {
    return npcSuperclass;
  }
  
  @JsonProperty(JSON_PROPERTY_NPC_SUPERCLASS)
  public void setNpcSuperclass_JsonNullable(JsonNullable<CompoundClass> npcSuperclass) {
    this.npcSuperclass = npcSuperclass;
  }

  public void setNpcSuperclass(CompoundClass npcSuperclass) {
    this.npcSuperclass = JsonNullable.<CompoundClass>of(npcSuperclass);
  }


  public CompoundClasses npcClass(CompoundClass npcClass) {
    this.npcClass = JsonNullable.<CompoundClass>of(npcClass);
    return this;
  }

   /**
   * Get npcClass
   * @return npcClass
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public CompoundClass getNpcClass() {
        return npcClass.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NPC_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CompoundClass> getNpcClass_JsonNullable() {
    return npcClass;
  }
  
  @JsonProperty(JSON_PROPERTY_NPC_CLASS)
  public void setNpcClass_JsonNullable(JsonNullable<CompoundClass> npcClass) {
    this.npcClass = npcClass;
  }

  public void setNpcClass(CompoundClass npcClass) {
    this.npcClass = JsonNullable.<CompoundClass>of(npcClass);
  }


  public CompoundClasses classyFireLineage(List<CompoundClass> classyFireLineage) {
    this.classyFireLineage = JsonNullable.<List<CompoundClass>>of(classyFireLineage);
    return this;
  }

  public CompoundClasses addClassyFireLineageItem(CompoundClass classyFireLineageItem) {
    if (this.classyFireLineage == null || !this.classyFireLineage.isPresent()) {
      this.classyFireLineage = JsonNullable.<List<CompoundClass>>of(new ArrayList<>());
    }
    try {
      this.classyFireLineage.get().add(classyFireLineageItem);
    } catch (NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Most likely ClassyFire lineage from ordered from least specific to most specific class  classyFireLineage.get(classyFireLineage.size() - 1) gives the most specific ClassyFire compound class annotation
   * @return classyFireLineage
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<CompoundClass> getClassyFireLineage() {
        return classyFireLineage.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLASSY_FIRE_LINEAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<CompoundClass>> getClassyFireLineage_JsonNullable() {
    return classyFireLineage;
  }
  
  @JsonProperty(JSON_PROPERTY_CLASSY_FIRE_LINEAGE)
  public void setClassyFireLineage_JsonNullable(JsonNullable<List<CompoundClass>> classyFireLineage) {
    this.classyFireLineage = classyFireLineage;
  }

  public void setClassyFireLineage(List<CompoundClass> classyFireLineage) {
    this.classyFireLineage = JsonNullable.<List<CompoundClass>>of(classyFireLineage);
  }


  public CompoundClasses classyFireAlternatives(List<CompoundClass> classyFireAlternatives) {
    this.classyFireAlternatives = JsonNullable.<List<CompoundClass>>of(classyFireAlternatives);
    return this;
  }

  public CompoundClasses addClassyFireAlternativesItem(CompoundClass classyFireAlternativesItem) {
    if (this.classyFireAlternatives == null || !this.classyFireAlternatives.isPresent()) {
      this.classyFireAlternatives = JsonNullable.<List<CompoundClass>>of(new ArrayList<>());
    }
    try {
      this.classyFireAlternatives.get().add(classyFireAlternativesItem);
    } catch (NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Alternative ClassyFire classes with high probability that do not fit into the linage
   * @return classyFireAlternatives
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<CompoundClass> getClassyFireAlternatives() {
        return classyFireAlternatives.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLASSY_FIRE_ALTERNATIVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<CompoundClass>> getClassyFireAlternatives_JsonNullable() {
    return classyFireAlternatives;
  }
  
  @JsonProperty(JSON_PROPERTY_CLASSY_FIRE_ALTERNATIVES)
  public void setClassyFireAlternatives_JsonNullable(JsonNullable<List<CompoundClass>> classyFireAlternatives) {
    this.classyFireAlternatives = classyFireAlternatives;
  }

  public void setClassyFireAlternatives(List<CompoundClass> classyFireAlternatives) {
    this.classyFireAlternatives = JsonNullable.<List<CompoundClass>>of(classyFireAlternatives);
  }


  /**
   * Return true if this CompoundClasses object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompoundClasses compoundClasses = (CompoundClasses) o;
    return equalsNullable(this.npcPathway, compoundClasses.npcPathway) &&
        equalsNullable(this.npcSuperclass, compoundClasses.npcSuperclass) &&
        equalsNullable(this.npcClass, compoundClasses.npcClass) &&
        equalsNullable(this.classyFireLineage, compoundClasses.classyFireLineage) &&
        equalsNullable(this.classyFireAlternatives, compoundClasses.classyFireAlternatives);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(npcPathway), hashCodeNullable(npcSuperclass), hashCodeNullable(npcClass), hashCodeNullable(classyFireLineage), hashCodeNullable(classyFireAlternatives));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompoundClasses {\n");
    sb.append("    npcPathway: ").append(toIndentedString(npcPathway)).append("\n");
    sb.append("    npcSuperclass: ").append(toIndentedString(npcSuperclass)).append("\n");
    sb.append("    npcClass: ").append(toIndentedString(npcClass)).append("\n");
    sb.append("    classyFireLineage: ").append(toIndentedString(classyFireLineage)).append("\n");
    sb.append("    classyFireAlternatives: ").append(toIndentedString(classyFireAlternatives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `npcPathway` to the URL query string
    if (getNpcPathway() != null) {
      joiner.add(getNpcPathway().toUrlQueryString(prefix + "npcPathway" + suffix));
    }

    // add `npcSuperclass` to the URL query string
    if (getNpcSuperclass() != null) {
      joiner.add(getNpcSuperclass().toUrlQueryString(prefix + "npcSuperclass" + suffix));
    }

    // add `npcClass` to the URL query string
    if (getNpcClass() != null) {
      joiner.add(getNpcClass().toUrlQueryString(prefix + "npcClass" + suffix));
    }

    // add `classyFireLineage` to the URL query string
    if (getClassyFireLineage() != null) {
      for (int i = 0; i < getClassyFireLineage().size(); i++) {
        if (getClassyFireLineage().get(i) != null) {
          joiner.add(getClassyFireLineage().get(i).toUrlQueryString(String.format("%sclassyFireLineage%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `classyFireAlternatives` to the URL query string
    if (getClassyFireAlternatives() != null) {
      for (int i = 0; i < getClassyFireAlternatives().size(); i++) {
        if (getClassyFireAlternatives().get(i) != null) {
          joiner.add(getClassyFireAlternatives().get(i).toUrlQueryString(String.format("%sclassyFireAlternatives%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

