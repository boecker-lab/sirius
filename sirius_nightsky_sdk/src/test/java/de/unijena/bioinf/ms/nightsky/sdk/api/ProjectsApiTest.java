/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.api;

import de.unijena.bioinf.ms.nightsky.sdk.client.ApiException;
import de.unijena.bioinf.ms.nightsky.sdk.model.PageProjectInfo;
import de.unijena.bioinf.ms.nightsky.sdk.model.ProjectInfo;
import de.unijena.bioinf.ms.nightsky.sdk.model.SearchQueryType;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ProjectsApi
 */
@Ignore
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    
    /**
     * Close project-space and remove it from application.
     *
     * Close project-space and remove it from application. Project will NOT be deleted from disk.   ATTENTION: This will cancel and remove all jobs running on this Project before closing it.  If there are many jobs, this might take some time.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void closeProjectSpaceTest() throws ApiException {
        String projectId = null;
        
        api.closeProjectSpace(projectId);
        
        // TODO: test validations
    }
    
    /**
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     *
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectSpaceTest() throws ApiException {
        String projectId = null;
        String pathToProject = null;
        String pathToSourceProject = null;
        Boolean awaitImport = null;
        ProjectInfo response = 
        api.createProjectSpace(projectId, pathToProject, pathToSourceProject, awaitImport);
        
        // TODO: test validations
    }
    
    /**
     * Get project space info by its projectId.
     *
     * Get project space info by its projectId.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectSpaceTest() throws ApiException {
        String projectId = null;
        ProjectInfo response = 
        api.getProjectSpace(projectId);
        
        // TODO: test validations
    }
    
    /**
     * List opened project spaces.
     *
     * List opened project spaces.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectSpacesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        String searchQuery = null;
        SearchQueryType querySyntax = null;
        PageProjectInfo response = 
        api.getProjectSpaces(page, size, sort, searchQuery, querySyntax);
        
        // TODO: test validations
    }
    
    /**
     * Open an existing project-space and make it accessible via the given projectId.
     *
     * Open an existing project-space and make it accessible via the given projectId.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void openProjectSpaceTest() throws ApiException {
        String projectId = null;
        String pathToProject = null;
        ProjectInfo response = 
        api.openProjectSpace(projectId, pathToProject);
        
        // TODO: test validations
    }
    
}
