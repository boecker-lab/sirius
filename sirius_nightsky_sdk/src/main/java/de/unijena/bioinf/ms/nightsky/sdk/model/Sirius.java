/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.unijena.bioinf.ms.nightsky.sdk.model.Instrument;
import de.unijena.bioinf.ms.nightsky.sdk.model.Timeout;
import de.unijena.bioinf.ms.nightsky.sdk.model.UseHeuristic;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * User/developer friendly parameter subset for the Formula/SIRIUS tool
 */
@JsonPropertyOrder({
  Sirius.JSON_PROPERTY_ENABLED,
  Sirius.JSON_PROPERTY_PROFILE,
  Sirius.JSON_PROPERTY_NUMBER_OF_CANDIDATES,
  Sirius.JSON_PROPERTY_NUMBER_OF_CANDIDATES_PER_ION,
  Sirius.JSON_PROPERTY_MASS_ACCURACY_M_S2PPM,
  Sirius.JSON_PROPERTY_ISOTOPE_MS2_SETTINGS,
  Sirius.JSON_PROPERTY_FORMULA_SEARCH_D_BS,
  Sirius.JSON_PROPERTY_ENFORCED_FORMULA_CONSTRAINTS,
  Sirius.JSON_PROPERTY_FALLBACK_FORMULA_CONSTRAINTS,
  Sirius.JSON_PROPERTY_DETECTABLE_ELEMENTS,
  Sirius.JSON_PROPERTY_ILP_TIMEOUT,
  Sirius.JSON_PROPERTY_USE_HEURISTIC
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-11T15:12:24.554845061+01:00[Europe/Berlin]")
public class Sirius {
  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_PROFILE = "profile";
  private JsonNullable<Instrument> profile = JsonNullable.<Instrument>undefined();

  public static final String JSON_PROPERTY_NUMBER_OF_CANDIDATES = "numberOfCandidates";
  private Integer numberOfCandidates;

  public static final String JSON_PROPERTY_NUMBER_OF_CANDIDATES_PER_ION = "numberOfCandidatesPerIon";
  private Integer numberOfCandidatesPerIon;

  public static final String JSON_PROPERTY_MASS_ACCURACY_M_S2PPM = "massAccuracyMS2ppm";
  private Double massAccuracyMS2ppm;

  /**
   * Specify how isotope patterns in MS/MS should be handled.  &lt;p&gt;  FILTER: When filtering is enabled, molecular formulas are excluded if their  theoretical isotope pattern does not match the theoretical one, even if their MS/MS pattern has high score.  &lt;p&gt;  SCORE: Use them for SCORING. To use this the instrument should produce clear MS/MS isotope patterns  &lt;p&gt;  IGNORE: Ignore that there might be isotope patterns in MS/MS
   */
  public enum IsotopeMs2SettingsEnum {
    IGNORE("IGNORE"),
    
    FILTER("FILTER"),
    
    SCORE("SCORE");

    private String value;

    IsotopeMs2SettingsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IsotopeMs2SettingsEnum fromValue(String value) {
      for (IsotopeMs2SettingsEnum b : IsotopeMs2SettingsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ISOTOPE_MS2_SETTINGS = "isotopeMs2Settings";
  private IsotopeMs2SettingsEnum isotopeMs2Settings;

  /**
   * Gets or Sets formulaSearchDBs
   */
  public enum FormulaSearchDBsEnum {
    ALL("ALL"),
    
    ALL_BUT_INSILICO("ALL_BUT_INSILICO"),
    
    BIO("BIO"),
    
    PUBCHEM("PUBCHEM"),
    
    MESH("MESH"),
    
    HMDB("HMDB"),
    
    KNAPSACK("KNAPSACK"),
    
    CHEBI("CHEBI"),
    
    PUBMED("PUBMED"),
    
    KEGG("KEGG"),
    
    HSDB("HSDB"),
    
    MACONDA("MACONDA"),
    
    METACYC("METACYC"),
    
    GNPS("GNPS"),
    
    ZINCBIO("ZINCBIO"),
    
    TRAIN("TRAIN"),
    
    YMDB("YMDB"),
    
    PLANTCYC("PLANTCYC"),
    
    NORMAN("NORMAN"),
    
    SUPERNATURAL("SUPERNATURAL"),
    
    COCONUT("COCONUT"),
    
    BLOODEXPOSOME("BloodExposome"),
    
    TEROMOL("TeroMol"),
    
    PUBCHEMANNOTATIONBIO("PUBCHEMANNOTATIONBIO"),
    
    PUBCHEMANNOTATIONDRUG("PUBCHEMANNOTATIONDRUG"),
    
    PUBCHEMANNOTATIONSAFETYANDTOXIC("PUBCHEMANNOTATIONSAFETYANDTOXIC"),
    
    PUBCHEMANNOTATIONFOOD("PUBCHEMANNOTATIONFOOD"),
    
    LOTUS("LOTUS"),
    
    FOODB("FooDB"),
    
    MIMEDB("MiMeDB"),
    
    LIPIDMAPS("LIPIDMAPS"),
    
    LIPID("LIPID"),
    
    KEGGMINE("KEGGMINE"),
    
    ECOCYCMINE("ECOCYCMINE"),
    
    YMDBMINE("YMDBMINE"),
    
    MASSBANK("MASSBANK"),
    
    DSSTOX("DSSTox");

    private String value;

    FormulaSearchDBsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FormulaSearchDBsEnum fromValue(String value) {
      for (FormulaSearchDBsEnum b : FormulaSearchDBsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FORMULA_SEARCH_D_BS = "formulaSearchDBs";
  private List<FormulaSearchDBsEnum> formulaSearchDBs;

  public static final String JSON_PROPERTY_ENFORCED_FORMULA_CONSTRAINTS = "enforcedFormulaConstraints";
  private String enforcedFormulaConstraints;

  public static final String JSON_PROPERTY_FALLBACK_FORMULA_CONSTRAINTS = "fallbackFormulaConstraints";
  private String fallbackFormulaConstraints;

  public static final String JSON_PROPERTY_DETECTABLE_ELEMENTS = "detectableElements";
  private List<String> detectableElements;

  public static final String JSON_PROPERTY_ILP_TIMEOUT = "ilpTimeout";
  private Timeout ilpTimeout;

  public static final String JSON_PROPERTY_USE_HEURISTIC = "useHeuristic";
  private UseHeuristic useHeuristic;

  public Sirius() { 
  }

  public Sirius enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * tags whether the tool is enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Sirius profile(Instrument profile) {
    this.profile = JsonNullable.<Instrument>of(profile);
    return this;
  }

   /**
   * Get profile
   * @return profile
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Instrument getProfile() {
        return profile.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PROFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Instrument> getProfile_JsonNullable() {
    return profile;
  }
  
  @JsonProperty(JSON_PROPERTY_PROFILE)
  public void setProfile_JsonNullable(JsonNullable<Instrument> profile) {
    this.profile = profile;
  }

  public void setProfile(Instrument profile) {
    this.profile = JsonNullable.<Instrument>of(profile);
  }


  public Sirius numberOfCandidates(Integer numberOfCandidates) {
    this.numberOfCandidates = numberOfCandidates;
    return this;
  }

   /**
   * Number of formula candidates to keep as result list (Formula Candidates).
   * @return numberOfCandidates
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_CANDIDATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumberOfCandidates() {
    return numberOfCandidates;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_CANDIDATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfCandidates(Integer numberOfCandidates) {
    this.numberOfCandidates = numberOfCandidates;
  }


  public Sirius numberOfCandidatesPerIon(Integer numberOfCandidatesPerIon) {
    this.numberOfCandidatesPerIon = numberOfCandidatesPerIon;
    return this;
  }

   /**
   * Use this parameter if you want to force SIRIUS to report at least  NumberOfCandidatesPerIon results per ionization.  if &lt;&#x3D; 0, this parameter will have no effect and just the top  NumberOfCandidates results will be reported.
   * @return numberOfCandidatesPerIon
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_CANDIDATES_PER_ION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumberOfCandidatesPerIon() {
    return numberOfCandidatesPerIon;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_CANDIDATES_PER_ION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfCandidatesPerIon(Integer numberOfCandidatesPerIon) {
    this.numberOfCandidatesPerIon = numberOfCandidatesPerIon;
  }


  public Sirius massAccuracyMS2ppm(Double massAccuracyMS2ppm) {
    this.massAccuracyMS2ppm = massAccuracyMS2ppm;
    return this;
  }

   /**
   * Maximum allowed mass accuracy. Only molecular formulas within this mass window are considered.
   * @return massAccuracyMS2ppm
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MASS_ACCURACY_M_S2PPM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMassAccuracyMS2ppm() {
    return massAccuracyMS2ppm;
  }


  @JsonProperty(JSON_PROPERTY_MASS_ACCURACY_M_S2PPM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMassAccuracyMS2ppm(Double massAccuracyMS2ppm) {
    this.massAccuracyMS2ppm = massAccuracyMS2ppm;
  }


  public Sirius isotopeMs2Settings(IsotopeMs2SettingsEnum isotopeMs2Settings) {
    this.isotopeMs2Settings = isotopeMs2Settings;
    return this;
  }

   /**
   * Specify how isotope patterns in MS/MS should be handled.  &lt;p&gt;  FILTER: When filtering is enabled, molecular formulas are excluded if their  theoretical isotope pattern does not match the theoretical one, even if their MS/MS pattern has high score.  &lt;p&gt;  SCORE: Use them for SCORING. To use this the instrument should produce clear MS/MS isotope patterns  &lt;p&gt;  IGNORE: Ignore that there might be isotope patterns in MS/MS
   * @return isotopeMs2Settings
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISOTOPE_MS2_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IsotopeMs2SettingsEnum getIsotopeMs2Settings() {
    return isotopeMs2Settings;
  }


  @JsonProperty(JSON_PROPERTY_ISOTOPE_MS2_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsotopeMs2Settings(IsotopeMs2SettingsEnum isotopeMs2Settings) {
    this.isotopeMs2Settings = isotopeMs2Settings;
  }


  public Sirius formulaSearchDBs(List<FormulaSearchDBsEnum> formulaSearchDBs) {
    this.formulaSearchDBs = formulaSearchDBs;
    return this;
  }

  public Sirius addFormulaSearchDBsItem(FormulaSearchDBsEnum formulaSearchDBsItem) {
    if (this.formulaSearchDBs == null) {
      this.formulaSearchDBs = new ArrayList<>();
    }
    this.formulaSearchDBs.add(formulaSearchDBsItem);
    return this;
  }

   /**
   * List Structure database to extract molecular formulas from to reduce formula search space.  SIRIUS is quite good at de novo formula annotation, so only enable if you have a good reason.
   * @return formulaSearchDBs
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORMULA_SEARCH_D_BS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FormulaSearchDBsEnum> getFormulaSearchDBs() {
    return formulaSearchDBs;
  }


  @JsonProperty(JSON_PROPERTY_FORMULA_SEARCH_D_BS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormulaSearchDBs(List<FormulaSearchDBsEnum> formulaSearchDBs) {
    this.formulaSearchDBs = formulaSearchDBs;
  }


  public Sirius enforcedFormulaConstraints(String enforcedFormulaConstraints) {
    this.enforcedFormulaConstraints = enforcedFormulaConstraints;
    return this;
  }

   /**
   * These configurations hold the information how to autodetect elements based on the given formula constraints.  Note: If the compound is already assigned to a specific molecular formula, this annotation is ignored.  &lt;p&gt;  Enforced: Enforced elements are always considered
   * @return enforcedFormulaConstraints
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENFORCED_FORMULA_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEnforcedFormulaConstraints() {
    return enforcedFormulaConstraints;
  }


  @JsonProperty(JSON_PROPERTY_ENFORCED_FORMULA_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnforcedFormulaConstraints(String enforcedFormulaConstraints) {
    this.enforcedFormulaConstraints = enforcedFormulaConstraints;
  }


  public Sirius fallbackFormulaConstraints(String fallbackFormulaConstraints) {
    this.fallbackFormulaConstraints = fallbackFormulaConstraints;
    return this;
  }

   /**
   * These configurations hold the information how to autodetect elements based on the given formula constraints.  Note: If the compound is already assigned to a specific molecular formula, this annotation is ignored.  &lt;p&gt;  Fallback: Fallback elements are used, if the auto-detection fails (e.g. no isotope pattern available)
   * @return fallbackFormulaConstraints
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FALLBACK_FORMULA_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFallbackFormulaConstraints() {
    return fallbackFormulaConstraints;
  }


  @JsonProperty(JSON_PROPERTY_FALLBACK_FORMULA_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFallbackFormulaConstraints(String fallbackFormulaConstraints) {
    this.fallbackFormulaConstraints = fallbackFormulaConstraints;
  }


  public Sirius detectableElements(List<String> detectableElements) {
    this.detectableElements = detectableElements;
    return this;
  }

  public Sirius addDetectableElementsItem(String detectableElementsItem) {
    if (this.detectableElements == null) {
      this.detectableElements = new ArrayList<>();
    }
    this.detectableElements.add(detectableElementsItem);
    return this;
  }

   /**
   * These configurations hold the information how to autodetect elements based on the given formula constraints.  Note: If the compound is already assigned to a specific molecular formula, this annotation is ignored.  &lt;p&gt;  Detectable: Detectable elements are added to the chemical alphabet, if there are indications for them (e.g. in isotope pattern)
   * @return detectableElements
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DETECTABLE_ELEMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDetectableElements() {
    return detectableElements;
  }


  @JsonProperty(JSON_PROPERTY_DETECTABLE_ELEMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetectableElements(List<String> detectableElements) {
    this.detectableElements = detectableElements;
  }


  public Sirius ilpTimeout(Timeout ilpTimeout) {
    this.ilpTimeout = ilpTimeout;
    return this;
  }

   /**
   * Get ilpTimeout
   * @return ilpTimeout
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ILP_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Timeout getIlpTimeout() {
    return ilpTimeout;
  }


  @JsonProperty(JSON_PROPERTY_ILP_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIlpTimeout(Timeout ilpTimeout) {
    this.ilpTimeout = ilpTimeout;
  }


  public Sirius useHeuristic(UseHeuristic useHeuristic) {
    this.useHeuristic = useHeuristic;
    return this;
  }

   /**
   * Get useHeuristic
   * @return useHeuristic
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_HEURISTIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UseHeuristic getUseHeuristic() {
    return useHeuristic;
  }


  @JsonProperty(JSON_PROPERTY_USE_HEURISTIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseHeuristic(UseHeuristic useHeuristic) {
    this.useHeuristic = useHeuristic;
  }


  /**
   * Return true if this Sirius object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sirius sirius = (Sirius) o;
    return Objects.equals(this.enabled, sirius.enabled) &&
        equalsNullable(this.profile, sirius.profile) &&
        Objects.equals(this.numberOfCandidates, sirius.numberOfCandidates) &&
        Objects.equals(this.numberOfCandidatesPerIon, sirius.numberOfCandidatesPerIon) &&
        Objects.equals(this.massAccuracyMS2ppm, sirius.massAccuracyMS2ppm) &&
        Objects.equals(this.isotopeMs2Settings, sirius.isotopeMs2Settings) &&
        Objects.equals(this.formulaSearchDBs, sirius.formulaSearchDBs) &&
        Objects.equals(this.enforcedFormulaConstraints, sirius.enforcedFormulaConstraints) &&
        Objects.equals(this.fallbackFormulaConstraints, sirius.fallbackFormulaConstraints) &&
        Objects.equals(this.detectableElements, sirius.detectableElements) &&
        Objects.equals(this.ilpTimeout, sirius.ilpTimeout) &&
        Objects.equals(this.useHeuristic, sirius.useHeuristic);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, hashCodeNullable(profile), numberOfCandidates, numberOfCandidatesPerIon, massAccuracyMS2ppm, isotopeMs2Settings, formulaSearchDBs, enforcedFormulaConstraints, fallbackFormulaConstraints, detectableElements, ilpTimeout, useHeuristic);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sirius {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    numberOfCandidates: ").append(toIndentedString(numberOfCandidates)).append("\n");
    sb.append("    numberOfCandidatesPerIon: ").append(toIndentedString(numberOfCandidatesPerIon)).append("\n");
    sb.append("    massAccuracyMS2ppm: ").append(toIndentedString(massAccuracyMS2ppm)).append("\n");
    sb.append("    isotopeMs2Settings: ").append(toIndentedString(isotopeMs2Settings)).append("\n");
    sb.append("    formulaSearchDBs: ").append(toIndentedString(formulaSearchDBs)).append("\n");
    sb.append("    enforcedFormulaConstraints: ").append(toIndentedString(enforcedFormulaConstraints)).append("\n");
    sb.append("    fallbackFormulaConstraints: ").append(toIndentedString(fallbackFormulaConstraints)).append("\n");
    sb.append("    detectableElements: ").append(toIndentedString(detectableElements)).append("\n");
    sb.append("    ilpTimeout: ").append(toIndentedString(ilpTimeout)).append("\n");
    sb.append("    useHeuristic: ").append(toIndentedString(useHeuristic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `enabled` to the URL query string
    if (getEnabled() != null) {
      joiner.add(String.format("%senabled%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnabled()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `profile` to the URL query string
    if (getProfile() != null) {
      joiner.add(String.format("%sprofile%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProfile()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numberOfCandidates` to the URL query string
    if (getNumberOfCandidates() != null) {
      joiner.add(String.format("%snumberOfCandidates%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumberOfCandidates()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numberOfCandidatesPerIon` to the URL query string
    if (getNumberOfCandidatesPerIon() != null) {
      joiner.add(String.format("%snumberOfCandidatesPerIon%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumberOfCandidatesPerIon()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `massAccuracyMS2ppm` to the URL query string
    if (getMassAccuracyMS2ppm() != null) {
      joiner.add(String.format("%smassAccuracyMS2ppm%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMassAccuracyMS2ppm()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `isotopeMs2Settings` to the URL query string
    if (getIsotopeMs2Settings() != null) {
      joiner.add(String.format("%sisotopeMs2Settings%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsotopeMs2Settings()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `formulaSearchDBs` to the URL query string
    if (getFormulaSearchDBs() != null) {
      for (int i = 0; i < getFormulaSearchDBs().size(); i++) {
        joiner.add(String.format("%sformulaSearchDBs%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getFormulaSearchDBs().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `enforcedFormulaConstraints` to the URL query string
    if (getEnforcedFormulaConstraints() != null) {
      joiner.add(String.format("%senforcedFormulaConstraints%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnforcedFormulaConstraints()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fallbackFormulaConstraints` to the URL query string
    if (getFallbackFormulaConstraints() != null) {
      joiner.add(String.format("%sfallbackFormulaConstraints%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFallbackFormulaConstraints()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `detectableElements` to the URL query string
    if (getDetectableElements() != null) {
      for (int i = 0; i < getDetectableElements().size(); i++) {
        joiner.add(String.format("%sdetectableElements%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getDetectableElements().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `ilpTimeout` to the URL query string
    if (getIlpTimeout() != null) {
      joiner.add(getIlpTimeout().toUrlQueryString(prefix + "ilpTimeout" + suffix));
    }

    // add `useHeuristic` to the URL query string
    if (getUseHeuristic() != null) {
      joiner.add(getUseHeuristic().toUrlQueryString(prefix + "useHeuristic" + suffix));
    }

    return joiner.toString();
  }
}

