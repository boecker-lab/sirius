/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.unijena.bioinf.ms.nightsky.sdk.api;

import de.unijena.bioinf.ms.nightsky.sdk.client.ApiClient;
import de.unijena.bioinf.ms.nightsky.sdk.client.ApiException;
import de.unijena.bioinf.ms.nightsky.sdk.client.ApiResponse;
import de.unijena.bioinf.ms.nightsky.sdk.client.Pair;

import de.unijena.bioinf.ms.nightsky.sdk.model.AlignedFeatureOptField;
import de.unijena.bioinf.ms.nightsky.sdk.model.Compound;
import de.unijena.bioinf.ms.nightsky.sdk.model.CompoundOptField;
import de.unijena.bioinf.ms.nightsky.sdk.model.PageCompound;
import de.unijena.bioinf.ms.nightsky.sdk.model.SearchQueryType;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-11T15:12:24.554845061+01:00[Europe/Berlin]")
public class CompoundsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public CompoundsApi() {
    this(new ApiClient());
  }

  public CompoundsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space.
   * Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space.
   * @param projectId project-space to delete from. (required)
   * @param compoundId identifier of the compound to delete. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteCompound(String projectId, String compoundId) throws ApiException {
    deleteCompoundWithHttpInfo(projectId, compoundId);
  }

  /**
   * Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space.
   * Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space.
   * @param projectId project-space to delete from. (required)
   * @param compoundId identifier of the compound to delete. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteCompoundWithHttpInfo(String projectId, String compoundId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteCompoundRequestBuilder(projectId, compoundId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteCompound", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteCompoundRequestBuilder(String projectId, String compoundId) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling deleteCompound");
    }
    // verify the required parameter 'compoundId' is set
    if (compoundId == null) {
      throw new ApiException(400, "Missing the required parameter 'compoundId' when calling deleteCompound");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()))
        .replace("{compoundId}", ApiClient.urlEncode(compoundId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get compound (group of ion identities) with the given identifier from the specified project-space.
   * Get compound (group of ion identities) with the given identifier from the specified project-space.
   * @param projectId project-space to read from. (required)
   * @param compoundId identifier of the compound (group of ion identities) to access. (required)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @param optFieldsFeatures  (optional
   * @return Compound
   * @throws ApiException if fails to make API call
   */
  public Compound getCompound(String projectId, String compoundId, List<CompoundOptField> optFields, List<AlignedFeatureOptField> optFieldsFeatures) throws ApiException {
    ApiResponse<Compound> localVarResponse = getCompoundWithHttpInfo(projectId, compoundId, optFields, optFieldsFeatures);
    return localVarResponse.getData();
  }

  /**
   * Get compound (group of ion identities) with the given identifier from the specified project-space.
   * Get compound (group of ion identities) with the given identifier from the specified project-space.
   * @param projectId project-space to read from. (required)
   * @param compoundId identifier of the compound (group of ion identities) to access. (required)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @param optFieldsFeatures  (optional
   * @return ApiResponse&lt;Compound&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Compound> getCompoundWithHttpInfo(String projectId, String compoundId, List<CompoundOptField> optFields, List<AlignedFeatureOptField> optFieldsFeatures) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCompoundRequestBuilder(projectId, compoundId, optFields, optFieldsFeatures);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCompound", localVarResponse);
        }
        return new ApiResponse<Compound>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Compound>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCompoundRequestBuilder(String projectId, String compoundId, List<CompoundOptField> optFields, List<AlignedFeatureOptField> optFieldsFeatures) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getCompound");
    }
    // verify the required parameter 'compoundId' is set
    if (compoundId == null) {
      throw new ApiException(400, "Missing the required parameter 'compoundId' when calling getCompound");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()))
        .replace("{compoundId}", ApiClient.urlEncode(compoundId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "optFields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "optFields", optFields));
    localVarQueryParameterBaseName = "optFieldsFeatures";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "optFieldsFeatures", optFieldsFeatures));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all available compounds (group of ion identities) in the given project-space.
   * Get all available compounds (group of ion identities) in the given project-space.
   * @param projectId project-space to read from. (required)
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @param optFieldsFeatures  (optional
   * @return PageCompound
   * @throws ApiException if fails to make API call
   */
  public PageCompound getCompounds(String projectId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<CompoundOptField> optFields, List<AlignedFeatureOptField> optFieldsFeatures) throws ApiException {
    ApiResponse<PageCompound> localVarResponse = getCompoundsWithHttpInfo(projectId, page, size, sort, searchQuery, querySyntax, optFields, optFieldsFeatures);
    return localVarResponse.getData();
  }

  /**
   * Get all available compounds (group of ion identities) in the given project-space.
   * Get all available compounds (group of ion identities) in the given project-space.
   * @param projectId project-space to read from. (required)
   * @param page Zero-based page index (0..N) (optional, default to 0)
   * @param size The size of the page to be returned (optional, default to 20)
   * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional
   * @param searchQuery optional search query in specified format (optional)
   * @param querySyntax query syntax used fpr searchQuery (optional)
   * @param optFields set of optional fields to be included. Use &#39;none&#39; only to override defaults. (optional
   * @param optFieldsFeatures  (optional
   * @return ApiResponse&lt;PageCompound&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PageCompound> getCompoundsWithHttpInfo(String projectId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<CompoundOptField> optFields, List<AlignedFeatureOptField> optFieldsFeatures) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCompoundsRequestBuilder(projectId, page, size, sort, searchQuery, querySyntax, optFields, optFieldsFeatures);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCompounds", localVarResponse);
        }
        return new ApiResponse<PageCompound>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PageCompound>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCompoundsRequestBuilder(String projectId, Integer page, Integer size, List<String> sort, String searchQuery, SearchQueryType querySyntax, List<CompoundOptField> optFields, List<AlignedFeatureOptField> optFieldsFeatures) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getCompounds");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/projects/{projectId}/compounds"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "page";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParameterBaseName = "size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParameterBaseName = "sort";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "sort", sort));
    localVarQueryParameterBaseName = "searchQuery";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchQuery", searchQuery));
    localVarQueryParameterBaseName = "querySyntax";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("querySyntax", querySyntax));
    localVarQueryParameterBaseName = "optFields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "optFields", optFields));
    localVarQueryParameterBaseName = "optFieldsFeatures";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "optFieldsFeatures", optFieldsFeatures));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
