/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * 
 */
@JsonPropertyOrder({
  UseHeuristic.JSON_PROPERTY_MZ_TO_USE_HEURISTIC,
  UseHeuristic.JSON_PROPERTY_MZ_TO_USE_HEURISTIC_ONLY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-11T15:12:24.554845061+01:00[Europe/Berlin]")
public class UseHeuristic {
  public static final String JSON_PROPERTY_MZ_TO_USE_HEURISTIC = "mzToUseHeuristic";
  private Integer mzToUseHeuristic;

  public static final String JSON_PROPERTY_MZ_TO_USE_HEURISTIC_ONLY = "mzToUseHeuristicOnly";
  private Integer mzToUseHeuristicOnly;

  public UseHeuristic() { 
  }

  public UseHeuristic mzToUseHeuristic(Integer mzToUseHeuristic) {
    this.mzToUseHeuristic = mzToUseHeuristic;
    return this;
  }

   /**
   * Get mzToUseHeuristic
   * @return mzToUseHeuristic
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MZ_TO_USE_HEURISTIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMzToUseHeuristic() {
    return mzToUseHeuristic;
  }


  @JsonProperty(JSON_PROPERTY_MZ_TO_USE_HEURISTIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMzToUseHeuristic(Integer mzToUseHeuristic) {
    this.mzToUseHeuristic = mzToUseHeuristic;
  }


  public UseHeuristic mzToUseHeuristicOnly(Integer mzToUseHeuristicOnly) {
    this.mzToUseHeuristicOnly = mzToUseHeuristicOnly;
    return this;
  }

   /**
   * Get mzToUseHeuristicOnly
   * @return mzToUseHeuristicOnly
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MZ_TO_USE_HEURISTIC_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMzToUseHeuristicOnly() {
    return mzToUseHeuristicOnly;
  }


  @JsonProperty(JSON_PROPERTY_MZ_TO_USE_HEURISTIC_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMzToUseHeuristicOnly(Integer mzToUseHeuristicOnly) {
    this.mzToUseHeuristicOnly = mzToUseHeuristicOnly;
  }


  /**
   * Return true if this UseHeuristic object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UseHeuristic useHeuristic = (UseHeuristic) o;
    return Objects.equals(this.mzToUseHeuristic, useHeuristic.mzToUseHeuristic) &&
        Objects.equals(this.mzToUseHeuristicOnly, useHeuristic.mzToUseHeuristicOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mzToUseHeuristic, mzToUseHeuristicOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UseHeuristic {\n");
    sb.append("    mzToUseHeuristic: ").append(toIndentedString(mzToUseHeuristic)).append("\n");
    sb.append("    mzToUseHeuristicOnly: ").append(toIndentedString(mzToUseHeuristicOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `mzToUseHeuristic` to the URL query string
    if (getMzToUseHeuristic() != null) {
      joiner.add(String.format("%smzToUseHeuristic%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMzToUseHeuristic()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `mzToUseHeuristicOnly` to the URL query string
    if (getMzToUseHeuristicOnly() != null) {
      joiner.add(String.format("%smzToUseHeuristicOnly%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMzToUseHeuristicOnly()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

